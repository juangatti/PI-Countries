{"ast":null,"code":"import { normalColors } from './prop-types';\n/**\n * This function allows validate if a string is a hexadecimal\n * value\n * @param str [string] hexadecimal value\n * @returns result [boolean]\n */\n\nexport const isHex = str => {\n  const exp = /#[a-fA-F0-9]{3,6}/g;\n  return exp.test(str);\n};\n/**\n *\n * @param hex [string]\n * @param alpha [number]\n * @returns [string]\n */\n\nexport const hexToRGBA = (hex, alpha = 1) => {\n  let r = 0,\n      g = 0,\n      b = 0; // 3 digits\n\n  if (hex.length == 4) {\n    r = '0x' + hex[1] + hex[1];\n    g = '0x' + hex[2] + hex[2];\n    b = '0x' + hex[3] + hex[3]; // 6 digits\n  } else if (hex.length == 7) {\n    r = '0x' + hex[1] + hex[2];\n    g = '0x' + hex[3] + hex[4];\n    b = '0x' + hex[5] + hex[6];\n  }\n\n  return `rgba(${+r}, ${+g},${+b},${alpha})`;\n};\nexport const getNormalColor = (color, palette, defaultColor = 'inherit') => {\n  const colors = {\n    default: defaultColor,\n    background: palette.background,\n    foreground: palette.foreground,\n    primary: palette.primary,\n    secondary: palette.secondary,\n    success: palette.success,\n    warning: palette.warning,\n    error: palette.error,\n    gradient: palette.gradient,\n    dark: palette.foreground,\n    invert: palette.foreground\n  };\n\n  if (typeof color == 'boolean') {\n    return color ? palette.primary : 'inherit';\n  }\n\n  if (color && colors[color]) {\n    return colors[color];\n  }\n\n  return color || defaultColor;\n};\nexport const isNormalColor = color => {\n  let found = normalColors.find(el => el === color);\n  return found !== undefined && found !== null;\n};\n/**\n * Function that checks color name support in the current browser\n * @param strColor\n * @returns boolean\n */\n\nexport const isColor = strColor => {\n  let s = new Option().style;\n  s.color = strColor;\n  return s.color == strColor;\n};\nexport const hexToRgb = color => {\n  const fullReg = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  const full = color.replace(fullReg, (_, r, g, b) => `${r}${r}${g}${g}${b}${b}`);\n  const values = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(full);\n\n  if (!values) {\n    throw new Error(`Next UI: Unsupported ${color} color.`);\n  }\n\n  return [Number.parseInt(values[1], 16), Number.parseInt(values[2], 16), Number.parseInt(values[3], 16)];\n};\nexport const hexFromString = (str, defaultColor = '', returnLast = false) => {\n  const fullReg = /#[a-fA-F0-9]{6}|#[a-fA-F0-9]{3}$/g;\n  const hexCodes = str.match(fullReg);\n\n  if (hexCodes && hexCodes.length > 0) {\n    return returnLast ? hexCodes[hexCodes.length - 1] : hexCodes;\n  }\n\n  return defaultColor;\n};\nexport const colorToRgbValues = color => {\n  if (color.charAt(0) === '#') return hexToRgb(color);\n  const safeColor = color.replace(/ /g, '');\n  const colorType = color.substr(0, 4);\n  const regArray = safeColor.match(/\\((.+)\\)/);\n\n  if (!colorType.startsWith('rgb') || !regArray) {\n    throw new Error(`Next UI: Only support [\"RGB\", \"RGBA\", \"HEX\"] color.`);\n  }\n\n  return regArray[1].split(',').map(str => Number.parseFloat(str));\n};\nexport const addColorAlpha = (color, alpha) => {\n  if (isHex(color)) {\n    return hexToRGBA(color, alpha);\n  } else if (!/^#|rgb|RGB/.test(color)) {\n    return color;\n  }\n\n  const [r, g, b] = colorToRgbValues(color);\n  const safeAlpha = alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;\n  return `rgba(${r}, ${g}, ${b}, ${safeAlpha})`;\n};\n\nfunction padZero(str, len) {\n  len = len || 2;\n  var zeros = new Array(len).join('0');\n  return (zeros + str).slice(-len);\n}\n\nexport const invertHex = (hex, smooth = true) => {\n  if (hex.indexOf('#') === 0) {\n    hex = hex.slice(1);\n  } // convert 3-digit hex to 6-digits.\n\n\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n\n  if (hex.length !== 6) {\n    console.error('Invalid HEX color.');\n  }\n\n  let r = parseInt(hex.slice(0, 2), 16),\n      g = parseInt(hex.slice(2, 4), 16),\n      b = parseInt(hex.slice(4, 6), 16);\n\n  if (smooth) {\n    // http://stackoverflow.com/a/3943023/112731\n    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';\n  } // invert color components\n\n\n  r = 255 - r;\n  g = 255 - g;\n  b = 255 - b; // pad each with zeros and return\n\n  return '#' + padZero(r.toString(16)) + padZero(g.toString(16)) + padZero(b.toString(16));\n};\nexport const getNormalShadowColor = (color, palette) => {\n  try {\n    const hexColor = color === 'gradient' ? hexFromString(palette.gradient, palette.primary, true) : getNormalColor(color, palette, palette.primary);\n    const [r, g, b] = hexToRgb(hexColor);\n    return `0 4px 14px 0 rgb(${r} ${g} ${b}/ 60%);`;\n  } catch (err) {\n    return 'none';\n  }\n};","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/PI Countries/PI-Countries/PI-Countries/client/node_modules/@nextui-org/react/esm/utils/color.js"],"names":["normalColors","isHex","str","exp","test","hexToRGBA","hex","alpha","r","g","b","length","getNormalColor","color","palette","defaultColor","colors","default","background","foreground","primary","secondary","success","warning","error","gradient","dark","invert","isNormalColor","found","find","el","undefined","isColor","strColor","s","Option","style","hexToRgb","fullReg","full","replace","_","values","exec","Error","Number","parseInt","hexFromString","returnLast","hexCodes","match","colorToRgbValues","charAt","safeColor","colorType","substr","regArray","startsWith","split","map","parseFloat","addColorAlpha","safeAlpha","padZero","len","zeros","Array","join","slice","invertHex","smooth","indexOf","console","toString","getNormalShadowColor","hexColor","err"],"mappings":"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","sourcesContent":["import { normalColors } from './prop-types';\n\n/**\n * This function allows validate if a string is a hexadecimal\n * value\n * @param str [string] hexadecimal value\n * @returns result [boolean]\n */\nexport const isHex = str => {\n  const exp = /#[a-fA-F0-9]{3,6}/g;\n  return exp.test(str);\n};\n/**\n *\n * @param hex [string]\n * @param alpha [number]\n * @returns [string]\n */\n\nexport const hexToRGBA = (hex, alpha = 1) => {\n  let r = 0,\n      g = 0,\n      b = 0; // 3 digits\n\n  if (hex.length == 4) {\n    r = '0x' + hex[1] + hex[1];\n    g = '0x' + hex[2] + hex[2];\n    b = '0x' + hex[3] + hex[3]; // 6 digits\n  } else if (hex.length == 7) {\n    r = '0x' + hex[1] + hex[2];\n    g = '0x' + hex[3] + hex[4];\n    b = '0x' + hex[5] + hex[6];\n  }\n\n  return `rgba(${+r}, ${+g},${+b},${alpha})`;\n};\nexport const getNormalColor = (color, palette, defaultColor = 'inherit') => {\n  const colors = {\n    default: defaultColor,\n    background: palette.background,\n    foreground: palette.foreground,\n    primary: palette.primary,\n    secondary: palette.secondary,\n    success: palette.success,\n    warning: palette.warning,\n    error: palette.error,\n    gradient: palette.gradient,\n    dark: palette.foreground,\n    invert: palette.foreground\n  };\n\n  if (typeof color == 'boolean') {\n    return color ? palette.primary : 'inherit';\n  }\n\n  if (color && colors[color]) {\n    return colors[color];\n  }\n\n  return color || defaultColor;\n};\nexport const isNormalColor = color => {\n  let found = normalColors.find(el => el === color);\n  return found !== undefined && found !== null;\n};\n/**\n * Function that checks color name support in the current browser\n * @param strColor\n * @returns boolean\n */\n\nexport const isColor = strColor => {\n  let s = new Option().style;\n  s.color = strColor;\n  return s.color == strColor;\n};\nexport const hexToRgb = color => {\n  const fullReg = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  const full = color.replace(fullReg, (_, r, g, b) => `${r}${r}${g}${g}${b}${b}`);\n  const values = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(full);\n\n  if (!values) {\n    throw new Error(`Next UI: Unsupported ${color} color.`);\n  }\n\n  return [Number.parseInt(values[1], 16), Number.parseInt(values[2], 16), Number.parseInt(values[3], 16)];\n};\nexport const hexFromString = (str, defaultColor = '', returnLast = false) => {\n  const fullReg = /#[a-fA-F0-9]{6}|#[a-fA-F0-9]{3}$/g;\n  const hexCodes = str.match(fullReg);\n\n  if (hexCodes && hexCodes.length > 0) {\n    return returnLast ? hexCodes[hexCodes.length - 1] : hexCodes;\n  }\n\n  return defaultColor;\n};\nexport const colorToRgbValues = color => {\n  if (color.charAt(0) === '#') return hexToRgb(color);\n  const safeColor = color.replace(/ /g, '');\n  const colorType = color.substr(0, 4);\n  const regArray = safeColor.match(/\\((.+)\\)/);\n\n  if (!colorType.startsWith('rgb') || !regArray) {\n    throw new Error(`Next UI: Only support [\"RGB\", \"RGBA\", \"HEX\"] color.`);\n  }\n\n  return regArray[1].split(',').map(str => Number.parseFloat(str));\n};\nexport const addColorAlpha = (color, alpha) => {\n  if (isHex(color)) {\n    return hexToRGBA(color, alpha);\n  } else if (!/^#|rgb|RGB/.test(color)) {\n    return color;\n  }\n\n  const [r, g, b] = colorToRgbValues(color);\n  const safeAlpha = alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;\n  return `rgba(${r}, ${g}, ${b}, ${safeAlpha})`;\n};\n\nfunction padZero(str, len) {\n  len = len || 2;\n  var zeros = new Array(len).join('0');\n  return (zeros + str).slice(-len);\n}\n\nexport const invertHex = (hex, smooth = true) => {\n  if (hex.indexOf('#') === 0) {\n    hex = hex.slice(1);\n  } // convert 3-digit hex to 6-digits.\n\n\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n\n  if (hex.length !== 6) {\n    console.error('Invalid HEX color.');\n  }\n\n  let r = parseInt(hex.slice(0, 2), 16),\n      g = parseInt(hex.slice(2, 4), 16),\n      b = parseInt(hex.slice(4, 6), 16);\n\n  if (smooth) {\n    // http://stackoverflow.com/a/3943023/112731\n    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';\n  } // invert color components\n\n\n  r = 255 - r;\n  g = 255 - g;\n  b = 255 - b; // pad each with zeros and return\n\n  return '#' + padZero(r.toString(16)) + padZero(g.toString(16)) + padZero(b.toString(16));\n};\nexport const getNormalShadowColor = (color, palette) => {\n  try {\n    const hexColor = color === 'gradient' ? hexFromString(palette.gradient, palette.primary, true) : getNormalColor(color, palette, palette.primary);\n    const [r, g, b] = hexToRgb(hexColor);\n    return `0 4px 14px 0 rgb(${r} ${g} ${b}/ 60%);`;\n  } catch (err) {\n    return 'none';\n  }\n};"]},"metadata":{},"sourceType":"module"}