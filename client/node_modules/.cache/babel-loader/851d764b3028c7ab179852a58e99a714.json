{"ast":null,"code":"import { useMemo, useCallback, useState } from 'react';\nimport { range } from '../utils/numbers';\nexport const DOTS = 'dots';\n\nconst usePagination = ({\n  page,\n  total,\n  siblings = 1,\n  boundaries = 1,\n  initialPage = 1,\n  onChange\n}) => {\n  const [activePage, setActivePage] = useState(page || initialPage);\n\n  const onChangeActivePage = newPage => {\n    setActivePage(newPage);\n    onChange && onChange(newPage);\n  };\n\n  const setPage = useCallback(pageNumber => {\n    if (pageNumber <= 0) {\n      onChangeActivePage(1);\n    } else if (pageNumber > total) {\n      onChangeActivePage(total);\n    } else {\n      onChangeActivePage(pageNumber);\n    }\n  }, [total]);\n\n  const next = () => setPage(activePage + 1);\n\n  const previous = () => setPage(activePage - 1);\n\n  const first = () => setPage(1);\n\n  const last = () => setPage(total);\n\n  const paginationRange = useMemo(() => {\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n    /*\n     * We do not want to show dots if there is only one position left\n     * after/before the left/right page count as that would lead to a change if our Pagination\n     * component size which we do not want\n     */\n\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n\n    return [...range(1, boundaries), DOTS, ...range(leftSiblingIndex, rightSiblingIndex), DOTS, ...range(total - boundaries + 1, total)];\n  }, [total, siblings, activePage]);\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last\n  };\n};\n\nexport default usePagination;","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/PI Countries/PI-Countries/PI-Countries/client/node_modules/@nextui-org/react/esm/use-pagination/index.js"],"names":["useMemo","useCallback","useState","range","DOTS","usePagination","page","total","siblings","boundaries","initialPage","onChange","activePage","setActivePage","onChangeActivePage","newPage","setPage","pageNumber","next","previous","first","last","paginationRange","totalPageNumbers","leftSiblingIndex","Math","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","leftItemCount","rightItemCount","active"],"mappings":"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","sourcesContent":["import { useMemo, useCallback, useState } from 'react';\nimport { range } from '../utils/numbers';\nexport const DOTS = 'dots';\n\nconst usePagination = ({\n  page,\n  total,\n  siblings = 1,\n  boundaries = 1,\n  initialPage = 1,\n  onChange\n}) => {\n  const [activePage, setActivePage] = useState(page || initialPage);\n\n  const onChangeActivePage = newPage => {\n    setActivePage(newPage);\n    onChange && onChange(newPage);\n  };\n\n  const setPage = useCallback(pageNumber => {\n    if (pageNumber <= 0) {\n      onChangeActivePage(1);\n    } else if (pageNumber > total) {\n      onChangeActivePage(total);\n    } else {\n      onChangeActivePage(pageNumber);\n    }\n  }, [total]);\n\n  const next = () => setPage(activePage + 1);\n\n  const previous = () => setPage(activePage - 1);\n\n  const first = () => setPage(1);\n\n  const last = () => setPage(total);\n\n  const paginationRange = useMemo(() => {\n    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;\n\n    if (totalPageNumbers >= total) {\n      return range(1, total);\n    }\n\n    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);\n    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);\n    /*\n     * We do not want to show dots if there is only one position left\n     * after/before the left/right page count as that would lead to a change if our Pagination\n     * component size which we do not want\n     */\n\n    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;\n    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      const leftItemCount = siblings * 2 + boundaries + 2;\n      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      const rightItemCount = boundaries + 1 + 2 * siblings;\n      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];\n    }\n\n    return [...range(1, boundaries), DOTS, ...range(leftSiblingIndex, rightSiblingIndex), DOTS, ...range(total - boundaries + 1, total)];\n  }, [total, siblings, activePage]);\n  return {\n    range: paginationRange,\n    active: activePage,\n    setPage,\n    next,\n    previous,\n    first,\n    last\n  };\n};\n\nexport default usePagination;"]},"metadata":{},"sourceType":"module"}