{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nconst defaultOptions = {\n  scrollLayer: false\n};\nconst elementStack = new Map();\n\nconst isIos = () => {\n  /* istanbul ignore next */\n  if (typeof window === 'undefined' || !window.navigator) return false;\n  return /iP(ad|hone|od)/.test(window.navigator.platform);\n};\n\nconst touchHandler = event => {\n  if (event.touches && event.touches.length > 1) return true;\n  event.preventDefault();\n  return false;\n};\n\nconst useBodyScroll = (elementRef, options) => {\n  /* istanbul ignore next */\n  if (typeof document === 'undefined') return [false, t => t];\n  const elRef = elementRef || useRef(document.body);\n  const [hidden, setHidden] = useState(false);\n  const safeOptions = { ...defaultOptions,\n    ...(options || {})\n  }; // don't prevent touch event when layer contain scroll\n\n  const isIosWithCustom = () => {\n    if (safeOptions.scrollLayer) return false;\n    return isIos();\n  };\n\n  useEffect(() => {\n    if (!elRef || !elRef.current) return;\n    const lastOverflow = elRef.current.style.overflow;\n\n    if (hidden) {\n      if (elementStack.has(elRef.current)) return;\n\n      if (!isIosWithCustom()) {\n        elRef.current.style.overflow = 'hidden';\n      } else {\n        document.addEventListener('touchmove', touchHandler, {\n          passive: false\n        });\n      }\n\n      elementStack.set(elRef.current, {\n        last: lastOverflow\n      });\n      return;\n    } // reset element overflow\n\n\n    if (!elementStack.has(elRef.current)) return;\n\n    if (!isIosWithCustom()) {\n      const store = elementStack.get(elRef.current);\n      elRef.current.style.overflow = store.last;\n    } else {\n      document.removeEventListener('touchmove', touchHandler);\n    }\n\n    elementStack.delete(elRef.current);\n  }, [hidden, elRef]);\n  return [hidden, setHidden];\n};\n\nexport default useBodyScroll;","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/PI Countries/PI-Countries/PI-Countries/client/node_modules/@nextui-org/react/esm/use-body-scroll/use-body-scroll.js"],"names":["useEffect","useRef","useState","defaultOptions","scrollLayer","elementStack","Map","isIos","window","navigator","test","platform","touchHandler","event","touches","length","preventDefault","useBodyScroll","elementRef","options","document","t","elRef","body","hidden","setHidden","safeOptions","isIosWithCustom","current","lastOverflow","style","overflow","has","addEventListener","passive","set","last","store","get","removeEventListener","delete"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nconst defaultOptions = {\n  scrollLayer: false\n};\nconst elementStack = new Map();\n\nconst isIos = () => {\n  /* istanbul ignore next */\n  if (typeof window === 'undefined' || !window.navigator) return false;\n  return /iP(ad|hone|od)/.test(window.navigator.platform);\n};\n\nconst touchHandler = event => {\n  if (event.touches && event.touches.length > 1) return true;\n  event.preventDefault();\n  return false;\n};\n\nconst useBodyScroll = (elementRef, options) => {\n  /* istanbul ignore next */\n  if (typeof document === 'undefined') return [false, t => t];\n  const elRef = elementRef || useRef(document.body);\n  const [hidden, setHidden] = useState(false);\n  const safeOptions = { ...defaultOptions,\n    ...(options || {})\n  }; // don't prevent touch event when layer contain scroll\n\n  const isIosWithCustom = () => {\n    if (safeOptions.scrollLayer) return false;\n    return isIos();\n  };\n\n  useEffect(() => {\n    if (!elRef || !elRef.current) return;\n    const lastOverflow = elRef.current.style.overflow;\n\n    if (hidden) {\n      if (elementStack.has(elRef.current)) return;\n\n      if (!isIosWithCustom()) {\n        elRef.current.style.overflow = 'hidden';\n      } else {\n        document.addEventListener('touchmove', touchHandler, {\n          passive: false\n        });\n      }\n\n      elementStack.set(elRef.current, {\n        last: lastOverflow\n      });\n      return;\n    } // reset element overflow\n\n\n    if (!elementStack.has(elRef.current)) return;\n\n    if (!isIosWithCustom()) {\n      const store = elementStack.get(elRef.current);\n      elRef.current.style.overflow = store.last;\n    } else {\n      document.removeEventListener('touchmove', touchHandler);\n    }\n\n    elementStack.delete(elRef.current);\n  }, [hidden, elRef]);\n  return [hidden, setHidden];\n};\n\nexport default useBodyScroll;"]},"metadata":{},"sourceType":"module"}