{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React, { useRef, useImperativeHandle, useLayoutEffect } from 'react';\nimport useTheme from '../use-theme';\nimport withDefaults from '../utils/with-defaults';\nimport Input from '../input';\nimport useResize from '../use-resize';\nimport useWarning from '../use-warning';\nimport { excludedInputPropsForTextarea } from '../utils/prop-types';\nimport { __DEV__ } from '../utils/assertion';\nimport { calculateNodeHeight, getSizingData } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  minRows: 3,\n  maxRows: 6,\n  cacheMeasurements: true,\n  initialValue: '',\n  width: 'initial'\n};\nconst Textarea = /*#__PURE__*/React.forwardRef((textareaProps, ref) => {\n  const theme = useTheme();\n  const textareaRef = useRef(null);\n  const heightRef = React.useRef(0);\n  const measurementsCacheRef = React.useRef();\n  const {\n    width,\n    cacheMeasurements,\n    rows,\n    maxRows,\n    minRows,\n    onChange,\n    onHeightChange,\n    ...props\n  } = textareaProps;\n  Object.keys(props).forEach(propNameKey => {\n    if (excludedInputPropsForTextarea.indexOf(propNameKey) > -1) {\n      // @ts-ignored\n      delete props[propNameKey];\n    }\n  });\n  const isControlled = props.value !== undefined;\n\n  if (__DEV__ && props.style) {\n    if ('maxHeight' in props.style) {\n      useWarning('Using `style.maxHeight` for <Textarea/> is not supported. Please use `maxRows`.');\n    }\n\n    if ('minHeight' in props.style) {\n      useWarning('Using `style.minHeight` for <Textarea/> is not supported. Please use `minRows`.');\n    }\n  }\n\n  useImperativeHandle(ref, () => textareaRef.current);\n\n  const resizeTextarea = () => {\n    const node = textareaRef.current;\n    const nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node);\n\n    if (!nodeSizingData) {\n      return;\n    }\n\n    measurementsCacheRef.current = nodeSizingData;\n    const [height, rowHeight] = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', rows || minRows, rows || maxRows);\n\n    if (heightRef.current !== height) {\n      heightRef.current = height;\n      node.style.setProperty('height', `${height}px`, 'important');\n      onHeightChange && onHeightChange(height, {\n        rowHeight\n      });\n    }\n  };\n\n  const handleChange = event => {\n    if (!isControlled) {\n      resizeTextarea();\n    }\n\n    onChange && onChange(event);\n  };\n\n  if (typeof document !== 'undefined') {\n    useLayoutEffect(resizeTextarea);\n    useResize(resizeTextarea);\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Input, {\n      as: \"textarea\",\n      ref: textareaRef,\n      width: width,\n      onChange: handleChange,\n      ...props\n    }), /*#__PURE__*/_jsx(_JSXStyle, {\n      id: \"1093480011\",\n      dynamic: [width, theme.font.sans, theme.layout.gapHalf],\n      children: `.textarea-wrapper{box-sizing:border-box;width:${width};min-width:12.5rem;max-width:100%;height:auto;}textarea{background-color:transparent;box-shadow:none;display:block;font-family:${theme.font.sans};padding:${theme.layout.gapHalf};width:100%;height:100%;resize:none;border:none;outline:none;}`\n    })]\n  });\n});\n\nif (__DEV__) {\n  Textarea.displayName = 'NextUI - Textarea';\n}\n\nexport default withDefaults(Textarea, defaultProps);","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/PI Countries/PI-Countries/PI-Countries/client/node_modules/@nextui-org/react/esm/textarea/textarea.js"],"names":["_JSXStyle","React","useRef","useImperativeHandle","useLayoutEffect","useTheme","withDefaults","Input","useResize","useWarning","excludedInputPropsForTextarea","__DEV__","calculateNodeHeight","getSizingData","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","defaultProps","minRows","maxRows","cacheMeasurements","initialValue","width","Textarea","forwardRef","textareaProps","ref","theme","textareaRef","heightRef","measurementsCacheRef","rows","onChange","onHeightChange","props","Object","keys","forEach","propNameKey","indexOf","isControlled","value","undefined","style","current","resizeTextarea","node","nodeSizingData","height","rowHeight","placeholder","setProperty","handleChange","event","document","children","as","id","dynamic","font","sans","layout","gapHalf","displayName"],"mappings":"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","sourcesContent":["import _JSXStyle from \"styled-jsx/style\";\nimport React, { useRef, useImperativeHandle, useLayoutEffect } from 'react';\nimport useTheme from '../use-theme';\nimport withDefaults from '../utils/with-defaults';\nimport Input from '../input';\nimport useResize from '../use-resize';\nimport useWarning from '../use-warning';\nimport { excludedInputPropsForTextarea } from '../utils/prop-types';\nimport { __DEV__ } from '../utils/assertion';\nimport { calculateNodeHeight, getSizingData } from './utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  minRows: 3,\n  maxRows: 6,\n  cacheMeasurements: true,\n  initialValue: '',\n  width: 'initial'\n};\nconst Textarea = /*#__PURE__*/React.forwardRef((textareaProps, ref) => {\n  const theme = useTheme();\n  const textareaRef = useRef(null);\n  const heightRef = React.useRef(0);\n  const measurementsCacheRef = React.useRef();\n  const {\n    width,\n    cacheMeasurements,\n    rows,\n    maxRows,\n    minRows,\n    onChange,\n    onHeightChange,\n    ...props\n  } = textareaProps;\n  Object.keys(props).forEach(propNameKey => {\n    if (excludedInputPropsForTextarea.indexOf(propNameKey) > -1) {\n      // @ts-ignored\n      delete props[propNameKey];\n    }\n  });\n  const isControlled = props.value !== undefined;\n\n  if (__DEV__ && props.style) {\n    if ('maxHeight' in props.style) {\n      useWarning('Using `style.maxHeight` for <Textarea/> is not supported. Please use `maxRows`.');\n    }\n\n    if ('minHeight' in props.style) {\n      useWarning('Using `style.minHeight` for <Textarea/> is not supported. Please use `minRows`.');\n    }\n  }\n\n  useImperativeHandle(ref, () => textareaRef.current);\n\n  const resizeTextarea = () => {\n    const node = textareaRef.current;\n    const nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node);\n\n    if (!nodeSizingData) {\n      return;\n    }\n\n    measurementsCacheRef.current = nodeSizingData;\n    const [height, rowHeight] = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', rows || minRows, rows || maxRows);\n\n    if (heightRef.current !== height) {\n      heightRef.current = height;\n      node.style.setProperty('height', `${height}px`, 'important');\n      onHeightChange && onHeightChange(height, {\n        rowHeight\n      });\n    }\n  };\n\n  const handleChange = event => {\n    if (!isControlled) {\n      resizeTextarea();\n    }\n\n    onChange && onChange(event);\n  };\n\n  if (typeof document !== 'undefined') {\n    useLayoutEffect(resizeTextarea);\n    useResize(resizeTextarea);\n  }\n\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Input, {\n      as: \"textarea\",\n      ref: textareaRef,\n      width: width,\n      onChange: handleChange,\n      ...props\n    }), /*#__PURE__*/_jsx(_JSXStyle, {\n      id: \"1093480011\",\n      dynamic: [width, theme.font.sans, theme.layout.gapHalf],\n      children: `.textarea-wrapper{box-sizing:border-box;width:${width};min-width:12.5rem;max-width:100%;height:auto;}textarea{background-color:transparent;box-shadow:none;display:block;font-family:${theme.font.sans};padding:${theme.layout.gapHalf};width:100%;height:100%;resize:none;border:none;outline:none;}`\n    })]\n  });\n});\n\nif (__DEV__) {\n  Textarea.displayName = 'NextUI - Textarea';\n}\n\nexport default withDefaults(Textarea, defaultProps);"]},"metadata":{},"sourceType":"module"}