{"ast":null,"code":"import React, { useEffect, useMemo, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport usePortal from '../use-portal';\nimport ModalWrapper from './modal-wrapper';\nimport Backdrop from '../backdrop';\nimport { ModalContext } from './modal-context';\nimport useBodyScroll from '../use-body-scroll';\nimport useCurrentState from '../use-current-state';\nimport useKeyboard, { KeyCode } from '../use-keyboard';\nimport { __DEV__ } from '../utils/assertion';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  width: '400px',\n  className: '',\n  preventClose: false,\n  fullScreen: false,\n  closeButton: false,\n  animated: true,\n  blur: false,\n  scroll: false,\n  noPadding: false\n};\n\nconst Modal = ({\n  children,\n  onClose,\n  onOpen,\n  open,\n  autoMargin,\n  width: wrapperWidth,\n  className,\n  preventClose,\n  blur,\n  animated,\n  fullScreen,\n  noPadding,\n  ...props\n}) => {\n  const portal = usePortal('modal');\n  const [, setBodyHidden] = useBodyScroll(null, {\n    scrollLayer: true\n  });\n  const [visible, setVisible, visibleRef] = useCurrentState(false);\n  const [rebound, setRebound] = useState(false);\n\n  const closeModal = () => {\n    onClose && onClose();\n    setVisible(false);\n    setBodyHidden(false);\n  };\n\n  useEffect(() => {\n    if (open === undefined) return;\n\n    if (open) {\n      onOpen && onOpen();\n    }\n\n    if (!open && visibleRef.current) {\n      onClose && onClose();\n    }\n\n    setVisible(open);\n    setBodyHidden(open);\n  }, [open]);\n\n  const toggleRebound = () => {\n    setRebound(true);\n    const timer = setTimeout(() => {\n      setRebound(false);\n      clearTimeout(timer);\n    }, 300);\n  };\n\n  const {\n    bindings\n  } = useKeyboard(() => {\n    if (preventClose) {\n      toggleRebound();\n      return;\n    }\n\n    closeModal();\n  }, KeyCode.Escape, {\n    disableGlobalEvent: true\n  });\n\n  const closeFromBackdrop = () => {\n    if (preventClose) {\n      toggleRebound();\n      return;\n    }\n\n    closeModal();\n  };\n\n  const modalConfig = useMemo(() => ({\n    close: closeModal,\n    autoMargin,\n    noPadding\n  }), []);\n  if (!portal) return null;\n  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsx(ModalContext.Provider, {\n    value: modalConfig,\n    children: /*#__PURE__*/_jsx(Backdrop, {\n      onClick: closeFromBackdrop,\n      visible: visible,\n      width: wrapperWidth,\n      fullScreenContent: fullScreen,\n      blur: blur,\n      animated: animated,\n      ...bindings,\n      children: /*#__PURE__*/_jsx(ModalWrapper, {\n        visible: visible,\n        onCloseButtonClick: closeModal,\n        className: className,\n        fullScreen: fullScreen,\n        rebound: rebound,\n        animated: animated,\n        ...props,\n        children: children\n      })\n    })\n  }), portal);\n};\n\nif (__DEV__) {\n  Backdrop.displayName = 'NextUI - Modal';\n}\n\nModal.defaultProps = defaultProps;\nexport default Modal;","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/PI Countries/PI-Countries/PI-Countries/client/node_modules/@nextui-org/react/esm/modal/modal.js"],"names":["React","useEffect","useMemo","useState","createPortal","usePortal","ModalWrapper","Backdrop","ModalContext","useBodyScroll","useCurrentState","useKeyboard","KeyCode","__DEV__","jsx","_jsx","defaultProps","width","className","preventClose","fullScreen","closeButton","animated","blur","scroll","noPadding","Modal","children","onClose","onOpen","open","autoMargin","wrapperWidth","props","portal","setBodyHidden","scrollLayer","visible","setVisible","visibleRef","rebound","setRebound","closeModal","undefined","current","toggleRebound","timer","setTimeout","clearTimeout","bindings","Escape","disableGlobalEvent","closeFromBackdrop","modalConfig","close","Provider","value","onClick","fullScreenContent","onCloseButtonClick","displayName"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport usePortal from '../use-portal';\nimport ModalWrapper from './modal-wrapper';\nimport Backdrop from '../backdrop';\nimport { ModalContext } from './modal-context';\nimport useBodyScroll from '../use-body-scroll';\nimport useCurrentState from '../use-current-state';\nimport useKeyboard, { KeyCode } from '../use-keyboard';\nimport { __DEV__ } from '../utils/assertion';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  width: '400px',\n  className: '',\n  preventClose: false,\n  fullScreen: false,\n  closeButton: false,\n  animated: true,\n  blur: false,\n  scroll: false,\n  noPadding: false\n};\n\nconst Modal = ({\n  children,\n  onClose,\n  onOpen,\n  open,\n  autoMargin,\n  width: wrapperWidth,\n  className,\n  preventClose,\n  blur,\n  animated,\n  fullScreen,\n  noPadding,\n  ...props\n}) => {\n  const portal = usePortal('modal');\n  const [, setBodyHidden] = useBodyScroll(null, {\n    scrollLayer: true\n  });\n  const [visible, setVisible, visibleRef] = useCurrentState(false);\n  const [rebound, setRebound] = useState(false);\n\n  const closeModal = () => {\n    onClose && onClose();\n    setVisible(false);\n    setBodyHidden(false);\n  };\n\n  useEffect(() => {\n    if (open === undefined) return;\n\n    if (open) {\n      onOpen && onOpen();\n    }\n\n    if (!open && visibleRef.current) {\n      onClose && onClose();\n    }\n\n    setVisible(open);\n    setBodyHidden(open);\n  }, [open]);\n\n  const toggleRebound = () => {\n    setRebound(true);\n    const timer = setTimeout(() => {\n      setRebound(false);\n      clearTimeout(timer);\n    }, 300);\n  };\n\n  const {\n    bindings\n  } = useKeyboard(() => {\n    if (preventClose) {\n      toggleRebound();\n      return;\n    }\n\n    closeModal();\n  }, KeyCode.Escape, {\n    disableGlobalEvent: true\n  });\n\n  const closeFromBackdrop = () => {\n    if (preventClose) {\n      toggleRebound();\n      return;\n    }\n\n    closeModal();\n  };\n\n  const modalConfig = useMemo(() => ({\n    close: closeModal,\n    autoMargin,\n    noPadding\n  }), []);\n  if (!portal) return null;\n  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsx(ModalContext.Provider, {\n    value: modalConfig,\n    children: /*#__PURE__*/_jsx(Backdrop, {\n      onClick: closeFromBackdrop,\n      visible: visible,\n      width: wrapperWidth,\n      fullScreenContent: fullScreen,\n      blur: blur,\n      animated: animated,\n      ...bindings,\n      children: /*#__PURE__*/_jsx(ModalWrapper, {\n        visible: visible,\n        onCloseButtonClick: closeModal,\n        className: className,\n        fullScreen: fullScreen,\n        rebound: rebound,\n        animated: animated,\n        ...props,\n        children: children\n      })\n    })\n  }), portal);\n};\n\nif (__DEV__) {\n  Backdrop.displayName = 'NextUI - Modal';\n}\n\nModal.defaultProps = defaultProps;\nexport default Modal;"]},"metadata":{},"sourceType":"module"}