{"ast":null,"code":"import { pick } from '../utils/collections';\nconst SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', 'tabSize', 'textIndent', 'textRendering', 'textTransform', 'width', 'wordBreak'];\nconst HIDDEN_TEXTAREA_STYLE = {\n  'min-height': '0',\n  'max-height': 'none',\n  height: '0',\n  visibility: 'hidden',\n  overflow: 'hidden',\n  position: 'absolute',\n  'z-index': '-1000',\n  top: '0',\n  right: '0'\n};\nconst isIE = typeof document !== 'undefined' ? !!document.documentElement.currentStyle : false;\nexport const forceHiddenStyles = node => {\n  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(key => {\n    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');\n  });\n};\nexport const getSizingData = node => {\n  const style = window.getComputedStyle(node);\n\n  if (style === null) {\n    return null;\n  }\n\n  const sizingStyle = pick(SIZING_STYLE, style);\n  const {\n    boxSizing\n  } = sizingStyle; // probably node is detached from DOM, can't read computed dimensions\n\n  if (boxSizing === '') {\n    return null;\n  } // IE (Edge has already correct behaviour) returns content width as computed width\n  // so we need to add manually padding and border widths\n\n\n  if (isIE && boxSizing === 'border-box') {\n    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';\n  }\n\n  const paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);\n  const borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);\n  return {\n    sizingStyle,\n    paddingSize,\n    borderSize\n  };\n}; // TODO: use labelled tuples once they are avaiable:\n//   export type CalculatedNodeHeights = [height: number, rowHeight: number];\n// https://github.com/microsoft/TypeScript/issues/28259\n\nlet hiddenTextarea = null;\n\nconst getHeight = (node, sizingData) => {\n  const height = node.scrollHeight;\n\n  if (sizingData.sizingStyle.boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    return height + sizingData.borderSize;\n  } // remove padding, since height = content\n\n\n  return height - sizingData.paddingSize;\n};\n\nexport const calculateNodeHeight = (sizingData, value, minRows = 1, maxRows = Infinity) => {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    hiddenTextarea.setAttribute('tabindex', '-1');\n    hiddenTextarea.setAttribute('aria-hidden', 'true');\n    forceHiddenStyles(hiddenTextarea);\n  }\n\n  if (hiddenTextarea.parentNode === null) {\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  const {\n    paddingSize,\n    borderSize,\n    sizingStyle\n  } = sizingData;\n  const {\n    boxSizing\n  } = sizingStyle;\n  Object.keys(sizingStyle).forEach(_key => {\n    const key = _key;\n    hiddenTextarea.style[key] = sizingStyle[key];\n  });\n  forceHiddenStyles(hiddenTextarea);\n  hiddenTextarea.value = value;\n  let height = getHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row\n\n  hiddenTextarea.value = 'x';\n  const rowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  let minHeight = rowHeight * minRows;\n\n  if (boxSizing === 'border-box') {\n    minHeight = minHeight + paddingSize + borderSize;\n  }\n\n  height = Math.max(minHeight, height);\n  let maxHeight = rowHeight * maxRows;\n\n  if (boxSizing === 'border-box') {\n    maxHeight = maxHeight + paddingSize + borderSize;\n  }\n\n  height = Math.min(maxHeight, height);\n  return [height, rowHeight];\n};","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/PI Countries/PI-Countries/PI-Countries/client/node_modules/@nextui-org/react/esm/textarea/utils.js"],"names":["pick","SIZING_STYLE","HIDDEN_TEXTAREA_STYLE","height","visibility","overflow","position","top","right","isIE","document","documentElement","currentStyle","forceHiddenStyles","node","Object","keys","forEach","key","style","setProperty","getSizingData","window","getComputedStyle","sizingStyle","boxSizing","width","parseFloat","borderRightWidth","borderLeftWidth","paddingRight","paddingLeft","paddingSize","paddingBottom","paddingTop","borderSize","borderBottomWidth","borderTopWidth","hiddenTextarea","getHeight","sizingData","scrollHeight","calculateNodeHeight","value","minRows","maxRows","Infinity","createElement","setAttribute","parentNode","body","appendChild","_key","rowHeight","minHeight","Math","max","maxHeight","min"],"mappings":"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","sourcesContent":["import { pick } from '../utils/collections';\nconst SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', 'tabSize', 'textIndent', 'textRendering', 'textTransform', 'width', 'wordBreak'];\nconst HIDDEN_TEXTAREA_STYLE = {\n  'min-height': '0',\n  'max-height': 'none',\n  height: '0',\n  visibility: 'hidden',\n  overflow: 'hidden',\n  position: 'absolute',\n  'z-index': '-1000',\n  top: '0',\n  right: '0'\n};\nconst isIE = typeof document !== 'undefined' ? !!document.documentElement.currentStyle : false;\nexport const forceHiddenStyles = node => {\n  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(key => {\n    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');\n  });\n};\nexport const getSizingData = node => {\n  const style = window.getComputedStyle(node);\n\n  if (style === null) {\n    return null;\n  }\n\n  const sizingStyle = pick(SIZING_STYLE, style);\n  const {\n    boxSizing\n  } = sizingStyle; // probably node is detached from DOM, can't read computed dimensions\n\n  if (boxSizing === '') {\n    return null;\n  } // IE (Edge has already correct behaviour) returns content width as computed width\n  // so we need to add manually padding and border widths\n\n\n  if (isIE && boxSizing === 'border-box') {\n    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';\n  }\n\n  const paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);\n  const borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);\n  return {\n    sizingStyle,\n    paddingSize,\n    borderSize\n  };\n}; // TODO: use labelled tuples once they are avaiable:\n//   export type CalculatedNodeHeights = [height: number, rowHeight: number];\n// https://github.com/microsoft/TypeScript/issues/28259\n\nlet hiddenTextarea = null;\n\nconst getHeight = (node, sizingData) => {\n  const height = node.scrollHeight;\n\n  if (sizingData.sizingStyle.boxSizing === 'border-box') {\n    // border-box: add border, since height = content + padding + border\n    return height + sizingData.borderSize;\n  } // remove padding, since height = content\n\n\n  return height - sizingData.paddingSize;\n};\n\nexport const calculateNodeHeight = (sizingData, value, minRows = 1, maxRows = Infinity) => {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea');\n    hiddenTextarea.setAttribute('tabindex', '-1');\n    hiddenTextarea.setAttribute('aria-hidden', 'true');\n    forceHiddenStyles(hiddenTextarea);\n  }\n\n  if (hiddenTextarea.parentNode === null) {\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  const {\n    paddingSize,\n    borderSize,\n    sizingStyle\n  } = sizingData;\n  const {\n    boxSizing\n  } = sizingStyle;\n  Object.keys(sizingStyle).forEach(_key => {\n    const key = _key;\n    hiddenTextarea.style[key] = sizingStyle[key];\n  });\n  forceHiddenStyles(hiddenTextarea);\n  hiddenTextarea.value = value;\n  let height = getHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row\n\n  hiddenTextarea.value = 'x';\n  const rowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  let minHeight = rowHeight * minRows;\n\n  if (boxSizing === 'border-box') {\n    minHeight = minHeight + paddingSize + borderSize;\n  }\n\n  height = Math.max(minHeight, height);\n  let maxHeight = rowHeight * maxRows;\n\n  if (boxSizing === 'border-box') {\n    maxHeight = maxHeight + paddingSize + borderSize;\n  }\n\n  height = Math.min(maxHeight, height);\n  return [height, rowHeight];\n};"]},"metadata":{},"sourceType":"module"}