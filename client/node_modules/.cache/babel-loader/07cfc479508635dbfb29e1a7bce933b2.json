{"ast":null,"code":"import { KeyMod } from './codes';\nimport { useEffect } from 'react';\nimport { getActiveModMap, getCtrlKeysByPlatform } from './helper';\n\nconst useKeyboard = (handler, keyBindings, options = {}) => {\n  const bindings = Array.isArray(keyBindings) ? keyBindings : [keyBindings];\n  const {\n    disableGlobalEvent = false,\n    capture = false,\n    stopPropagation = false,\n    preventDefault = true,\n    event = 'keydown'\n  } = options;\n  const activeModMap = getActiveModMap(bindings);\n  const keyCodes = bindings.filter(item => !KeyMod[item]);\n  const {\n    CtrlCmd,\n    WinCtrl\n  } = getCtrlKeysByPlatform();\n\n  const eventHandler = event => {\n    if (activeModMap.Shift && !event.shiftKey) return;\n    if (activeModMap.Alt && !event.altKey) return;\n    if (activeModMap.CtrlCmd && !event[CtrlCmd]) return;\n    if (activeModMap.WinCtrl && !event[WinCtrl]) return;\n    if (keyCodes.length > 0 && !keyCodes.includes(event.keyCode)) return;\n\n    if (stopPropagation) {\n      event.stopPropagation();\n    }\n\n    if (preventDefault) {\n      event.preventDefault();\n    }\n\n    handler && handler(event);\n  };\n\n  useEffect(() => {\n    if (!disableGlobalEvent) {\n      document.addEventListener(event, eventHandler);\n    }\n\n    return () => {\n      document.removeEventListener(event, eventHandler);\n    };\n  }, [disableGlobalEvent]);\n\n  const elementBindingHandler = (elementEventType, isCapture = false) => {\n    if (elementEventType !== event) return () => {};\n    if (isCapture !== capture) return () => {};\n    return e => eventHandler(e);\n  };\n\n  return {\n    bindings: {\n      onKeyDown: elementBindingHandler('keydown'),\n      onKeyDownCapture: elementBindingHandler('keydown', true),\n      onKeyPress: elementBindingHandler('keypress'),\n      onKeyPressCapture: elementBindingHandler('keypress', true),\n      onKeyUp: elementBindingHandler('keyup'),\n      onKeyUpCapture: elementBindingHandler('keyup', true)\n    }\n  };\n};\n\nexport default useKeyboard;","map":{"version":3,"sources":["C:/Users/Usuario/Desktop/PI Countries/PI-Countries/PI-Countries/client/node_modules/@nextui-org/react/esm/use-keyboard/use-keyboard.js"],"names":["KeyMod","useEffect","getActiveModMap","getCtrlKeysByPlatform","useKeyboard","handler","keyBindings","options","bindings","Array","isArray","disableGlobalEvent","capture","stopPropagation","preventDefault","event","activeModMap","keyCodes","filter","item","CtrlCmd","WinCtrl","eventHandler","Shift","shiftKey","Alt","altKey","length","includes","keyCode","document","addEventListener","removeEventListener","elementBindingHandler","elementEventType","isCapture","e","onKeyDown","onKeyDownCapture","onKeyPress","onKeyPressCapture","onKeyUp","onKeyUpCapture"],"mappings":"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","sourcesContent":["import { KeyMod } from './codes';\nimport { useEffect } from 'react';\nimport { getActiveModMap, getCtrlKeysByPlatform } from './helper';\n\nconst useKeyboard = (handler, keyBindings, options = {}) => {\n  const bindings = Array.isArray(keyBindings) ? keyBindings : [keyBindings];\n  const {\n    disableGlobalEvent = false,\n    capture = false,\n    stopPropagation = false,\n    preventDefault = true,\n    event = 'keydown'\n  } = options;\n  const activeModMap = getActiveModMap(bindings);\n  const keyCodes = bindings.filter(item => !KeyMod[item]);\n  const {\n    CtrlCmd,\n    WinCtrl\n  } = getCtrlKeysByPlatform();\n\n  const eventHandler = event => {\n    if (activeModMap.Shift && !event.shiftKey) return;\n    if (activeModMap.Alt && !event.altKey) return;\n    if (activeModMap.CtrlCmd && !event[CtrlCmd]) return;\n    if (activeModMap.WinCtrl && !event[WinCtrl]) return;\n    if (keyCodes.length > 0 && !keyCodes.includes(event.keyCode)) return;\n\n    if (stopPropagation) {\n      event.stopPropagation();\n    }\n\n    if (preventDefault) {\n      event.preventDefault();\n    }\n\n    handler && handler(event);\n  };\n\n  useEffect(() => {\n    if (!disableGlobalEvent) {\n      document.addEventListener(event, eventHandler);\n    }\n\n    return () => {\n      document.removeEventListener(event, eventHandler);\n    };\n  }, [disableGlobalEvent]);\n\n  const elementBindingHandler = (elementEventType, isCapture = false) => {\n    if (elementEventType !== event) return () => {};\n    if (isCapture !== capture) return () => {};\n    return e => eventHandler(e);\n  };\n\n  return {\n    bindings: {\n      onKeyDown: elementBindingHandler('keydown'),\n      onKeyDownCapture: elementBindingHandler('keydown', true),\n      onKeyPress: elementBindingHandler('keypress'),\n      onKeyPressCapture: elementBindingHandler('keypress', true),\n      onKeyUp: elementBindingHandler('keyup'),\n      onKeyUpCapture: elementBindingHandler('keyup', true)\n    }\n  };\n};\n\nexport default useKeyboard;"]},"metadata":{},"sourceType":"module"}