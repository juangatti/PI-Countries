"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _react = _interopRequireWildcard(require("react"));

var _tooltip = _interopRequireDefault(require("../tooltip"));

var _useTheme = _interopRequireDefault(require("../use-theme"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _styles = require("./styles");

var _snippetIcon = _interopRequireDefault(require("./snippet-icon"));

var _useClipboard = _interopRequireDefault(require("../use-clipboard"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  filled: false,
  bordered: false,
  showTooltip: true,
  symbol: '$',
  width: 'initial',
  copy: 'default',
  type: 'default',
  tooltipColor: 'default',
  tooltipCopyText: 'Copy',
  tooltipCopiedText: 'Copied',
  className: ''
};

const textArrayToString = text => {
  return text.reduce((pre, current) => {
    if (!current) return pre;
    return pre ? `${pre}\n${current}` : current;
  }, '');
};

const Snippet = ({
  type,
  filled,
  bordered,
  children,
  symbol,
  showTooltip,
  text,
  width,
  tooltipCopyText,
  tooltipCopiedText,
  tooltipColor,
  copy: copyType,
  className,
  ...props
}) => {
  const theme = (0, _useTheme.default)();
  const [copied, setCopied] = (0, _react.useState)(false);
  const {
    copy
  } = (0, _useClipboard.default)();
  const ref = (0, _react.useRef)(null);
  const isMultiLine = text && Array.isArray(text);
  const style = (0, _react.useMemo)(() => (0, _styles.getStyles)(type, theme.palette, filled), [type, theme.palette, filled]);
  const showCopyIcon = (0, _react.useMemo)(() => copyType !== 'prevent', [copyType]);
  const childText = (0, _react.useMemo)(() => {
    if (isMultiLine) return textArrayToString(text);
    if (!children) return text;
    if (!ref.current) return '';
    return ref.current.textContent;
  }, [ref.current, children, text]);
  const snippetWidth = (0, _react.useMemo)(() => {
    return showCopyIcon ? `calc(100% - 2 * ${theme.layout.gap})` : '100%';
  }, [showCopyIcon]);
  const symbolBefore = (0, _react.useMemo)(() => {
    const str = symbol.trim();
    return str ? `${str} ` : '';
  }, [symbol]);

  const clickHandler = () => {
    if (!childText || !showCopyIcon) return;
    copy(childText);
    if (copyType === 'slient') return;
    setCopied(true);
  };

  const handleTooltipVisibleChange = () => {
    setTimeout(() => {
      setCopied(false);
    }, 200);
  };

  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", { ...props,
    className: _style.default.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]) + " " + (props && props.className != null && props.className || `snippet ${className}`),
    children: [isMultiLine ? text.map((t, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
      className: _style.default.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]),
      children: t
    }, `snippet-${index}-${t}`)) : /*#__PURE__*/(0, _jsxRuntime.jsx)("pre", {
      ref: ref,
      className: _style.default.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]),
      children: children || text
    }), showCopyIcon && copyType !== 'slient' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_tooltip.default, {
      hideArrow: true,
      rounded: true,
      color: tooltipColor,
      content: copied ? tooltipCopiedText : tooltipCopyText,
      onVisibleChange: handleTooltipVisibleChange,
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        onClick: clickHandler,
        className: _style.default.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]) + " " + "copy",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_snippetIcon.default, {
          fill: theme.palette.accents_6
        })
      })
    }) : copyType !== 'prevent' && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
      onClick: clickHandler,
      className: _style.default.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]) + " " + "copy",
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_snippetIcon.default, {
        fill: theme.palette.accents_6
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_style.default, {
      id: "4130456444",
      dynamic: [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap],
      children: `.snippet.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;width:${width};max-width:100%;padding:calc(${theme.layout.gap} * 0.75) ${theme.layout.gap};color:${style.color};background:${style.bgColor};border:${bordered ? '1px' : '0px'} solid ${style.border};border-radius:${theme.layout.radius};}pre.__jsx-style-dynamic-selector{margin:0;padding:0;border:none;border-radius:0;width:${snippetWidth};background-color:transparent;color:${style.color};font-size:0.8125rem;}pre.__jsx-style-dynamic-selector::before{content:'${symbolBefore}';-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}pre.__jsx-style-dynamic-selector *{margin:0;padding:0;font-size:inherit;color:inherit;}.copy.__jsx-style-dynamic-selector{background-color:${style.bgColor};display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;width:calc(2 * ${theme.layout.gap});color:inherit;-webkit-transition:opacity 0.2s ease 0s;transition:opacity 0.2s ease 0s;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}.copy.__jsx-style-dynamic-selector:hover{opacity:0.7;}`
    })]
  });
};

const MemoSnippet = /*#__PURE__*/_react.default.memo(Snippet);

var _default = (0, _withDefaults.default)(MemoSnippet, defaultProps);

exports.default = _default;
module.exports = exports.default;