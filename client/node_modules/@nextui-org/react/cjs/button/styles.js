"use strict";

exports.__esModule = true;
exports.getButtonDripColor = exports.getButtonSize = exports.getButtonCursor = exports.getLoadingBackground = exports.getLoadingSize = exports.getButtonColors = exports.getGroupBorder = void 0;

var _color = require("../utils/color");

var _dimensions = require("../utils/dimensions");

const getGroupBorder = (palette, props) => {
  const {
    bordered,
    color,
    borderWeight
  } = props;
  const border = (0, _dimensions.getNormalWeight)(borderWeight);
  const common = {
    color: palette.background,
    width: bordered ? border : '0px'
  };
  const key = (color === 'default' ? 'primary' : color) || 'primary';
  if (!bordered && color !== 'primary') return common;
  const buttonColor = { ...common,
    color: palette[key] || palette.primary
  };
  return buttonColor;
};

exports.getGroupBorder = getGroupBorder;

const getButtonColors = (palette, props) => {
  const {
    color,
    disabled,
    bordered,
    ghost,
    borderWeight,
    flat,
    light
  } = props;
  const border = (0, _dimensions.getNormalWeight)(borderWeight);
  const common = {
    color: palette.white,
    border: {
      width: border || '0px'
    }
  };
  const key = (color === 'default' ? 'primary' : color) || 'primary';
  const normalColor = (0, _color.getNormalColor)(key, palette);
  const buttonColor = { ...common,
    bg: normalColor,
    loaderBg: normalColor || palette.primary
  };
  if (disabled) return {
    bg: palette.accents_2,
    color: palette.accents_4,
    loaderBg: palette.accents_1,
    hover: {
      bg: palette.accents_2
    }
  };
  const baseColor = color === 'default' ? palette.accents_2 : normalColor;
  const highlightColor = color === 'default' ? palette.primary : baseColor;
  const borderedGradientStyles = { ...buttonColor,
    bg: 'transparent',
    color: 'inherit',
    border: {
      display: 'none'
    },
    style: {
      padding: border,
      backgroundClip: 'content-box, border-box',
      backgroundImage: `linear-gradient(${palette.background},${palette.background}),
       ${palette.gradient}`
    },
    hover: {
      color: (0, _color.addColorAlpha)(palette.text, 0.8),
      style: {
        filter: 'hue-rotate(40deg);'
      }
    }
  };
  if (bordered) return color === 'gradient' ? borderedGradientStyles : { ...buttonColor,
    bg: 'transparent',
    color: highlightColor,
    border: {
      display: 'solid',
      width: border,
      color: highlightColor
    },
    hover: {
      color: (0, _color.addColorAlpha)(highlightColor, 0.85),
      border: {
        color: (0, _color.addColorAlpha)(highlightColor, 0.8)
      }
    }
  };
  if (light) return { ...buttonColor,
    bg: 'transparent',
    color: color === 'default' ? palette.foreground : baseColor,
    hover: {
      color: color === 'default' ? (0, _color.addColorAlpha)(palette.foreground, 0.85) : (0, _color.addColorAlpha)(baseColor, 0.9)
    }
  };
  if (flat) return { ...buttonColor,
    bg: (0, _color.addColorAlpha)((buttonColor == null ? void 0 : buttonColor.bg) || palette.foreground, 0.15),
    color: highlightColor,
    hover: {
      bg: (0, _color.addColorAlpha)((buttonColor == null ? void 0 : buttonColor.bg) || palette.foreground, 0.25)
    }
  };

  if (ghost) {
    if (color === 'gradient') {
      return { ...borderedGradientStyles,
        hover: {
          bg: palette.gradient
        }
      };
    }

    return { ...buttonColor,
      bg: 'transparent',
      border: {
        display: 'solid',
        width: border,
        color: highlightColor
      },
      color: highlightColor,
      hover: {
        bg: normalColor,
        color: palette.white,
        border: {
          color: 'transparent'
        }
      }
    };
  }

  return { ...buttonColor,
    hover: {
      bg: color === 'gradient' ? normalColor : (0, _color.addColorAlpha)(normalColor, 0.85),
      style: {
        filter: color === 'gradient' ? 'hue-rotate(40deg);' : 'none'
      }
    }
  };
};

exports.getButtonColors = getButtonColors;

const getLoadingSize = size => {
  const loaderSizes = {
    mini: 'mini',
    small: 'small',
    medium: 'small',
    large: 'medium',
    xlarge: 'medium'
  };
  return loaderSizes[size] || 'small';
};

exports.getLoadingSize = getLoadingSize;

const getLoadingBackground = (palette, color) => {
  const colors = {
    primary: palette.primary,
    secondary: palette.secondary,
    success: palette.success,
    warning: palette.warning,
    error: palette.error
  };
  return colors[color] || color || null;
};

exports.getLoadingBackground = getLoadingBackground;

const getButtonCursor = (disabled, loading) => {
  if (disabled) return {
    cursor: 'not-allowed',
    events: 'auto'
  };
  if (loading) return {
    cursor: 'default',
    events: 'none'
  };
  return {
    cursor: 'pointer',
    events: 'auto'
  };
};

exports.getButtonCursor = getButtonCursor;

const getButtonSize = (size = 'medium', auto) => {
  const loaderSize = getLoadingSize(size);
  const defaultLayout = {
    loaderSize,
    height: '2.5rem',
    width: 'auto',
    padding: '1.375rem',
    fontSize: '.875rem',
    minWidth: '12.5rem'
  };
  const autoPaddings = {
    mini: '0.625rem',
    small: '0.9375rem',
    medium: '1.25rem',
    large: '1.5625rem',
    xlarge: '1.875rem'
  };
  const layouts = {
    mini: {
      loaderSize,
      height: '1.5rem',
      width: 'initial',
      padding: '1.375rem',
      fontSize: '.75rem',
      minWidth: '5.25rem'
    },
    small: {
      loaderSize,
      height: '2rem',
      width: 'initial',
      padding: '1.25rem',
      fontSize: '.875rem',
      minWidth: '9.375rem'
    },
    medium: defaultLayout,
    large: {
      loaderSize,
      height: '2.75rem',
      width: 'initial',
      padding: '1.875rem',
      fontSize: '1rem',
      minWidth: '15.625rem'
    },
    xlarge: {
      loaderSize,
      height: '3.5rem',
      width: 'initial',
      padding: '2.875rem',
      fontSize: '1.2rem',
      minWidth: '18.625rem'
    }
  };
  if (auto) return { ...(layouts[size] || defaultLayout),
    padding: autoPaddings[size] || autoPaddings.medium,
    minWidth: 'min-content',
    width: 'auto'
  };
  return layouts[size] || defaultLayout;
};

exports.getButtonSize = getButtonSize;

const getButtonDripColor = (palette, props) => {
  const {
    color,
    bordered,
    flat,
    light
  } = props;
  const colors = {
    default: palette.accents_2,
    primary: palette.primary,
    secondary: palette.secondary,
    success: palette.success,
    warning: palette.warning,
    error: palette.error,
    gradient: (0, _color.hexFromString)(palette.gradient, palette.primary, true)
  };
  const baseColor = color === 'default' ? palette.primary : colors[color || 'default'] || (0, _color.getNormalColor)(color, palette);
  if (light) return (0, _color.addColorAlpha)(palette.accents_2, 0.8);
  if (flat) return (0, _color.addColorAlpha)(baseColor || palette.accents_2, 0.4);
  const selectedColor = bordered ? baseColor : palette.accents_2;
  if (selectedColor) return (0, _color.addColorAlpha)(selectedColor, 0.25);
  return palette.accents_2;
};

exports.getButtonDripColor = getButtonDripColor;