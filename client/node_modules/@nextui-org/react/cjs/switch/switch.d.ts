import React from 'react';
import { NormalSizes, NormalColors } from '../utils/prop-types';
interface SwitchEventTarget {
    checked: boolean;
}
export interface SwitchEvent {
    target: SwitchEventTarget;
    stopPropagation: () => void;
    preventDefault: () => void;
    nativeEvent: React.ChangeEvent;
}
interface Props {
    color?: NormalColors | string;
    checked?: boolean;
    squared?: boolean;
    bordered?: boolean;
    icon?: React.ReactNode;
    iconOn?: React.ReactNode;
    iconOff?: React.ReactNode;
    initialChecked?: boolean;
    onChange?: (ev: SwitchEvent) => void;
    disabled?: boolean;
    size?: NormalSizes;
    className?: string;
}
declare const defaultProps: {
    color: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "gradient";
    size: "mini" | "small" | "medium" | "large" | "xlarge";
    disabled: boolean;
    bordered: boolean;
    squared: boolean;
    initialChecked: boolean;
    className: string;
};
declare type NativeAttrs = Omit<React.LabelHTMLAttributes<unknown>, keyof Props>;
export declare type SwitchProps = Props & typeof defaultProps & NativeAttrs;
declare const _default: React.ComponentType<Partial<{
    color: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "gradient";
    size: "mini" | "small" | "medium" | "large" | "xlarge";
    disabled: boolean;
    bordered: boolean;
    squared: boolean;
    initialChecked: boolean;
    className: string;
}> & Omit<Props & {
    color: "default" | "primary" | "secondary" | "success" | "warning" | "error" | "gradient";
    size: "mini" | "small" | "medium" | "large" | "xlarge";
    disabled: boolean;
    bordered: boolean;
    squared: boolean;
    initialChecked: boolean;
    className: string;
} & NativeAttrs, "className" | "color" | "bordered" | "size" | "squared" | "disabled" | "initialChecked">>;
export default _default;
