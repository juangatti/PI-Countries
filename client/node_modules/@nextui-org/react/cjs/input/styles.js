"use strict";

exports.__esModule = true;
exports.getColors = exports.getShadowColor = exports.getSizes = void 0;

var _color = require("../utils/color");

var _assertion = require("../utils/assertion");

const getSizes = size => {
  const sizes = {
    mini: {
      heightRatio: '1.2',
      fontSize: '.75rem'
    },
    small: {
      heightRatio: '1.5',
      fontSize: '.75rem'
    },
    medium: {
      heightRatio: '1.687',
      fontSize: '.875rem'
    },
    large: {
      heightRatio: '1.875',
      fontSize: '1rem'
    },
    xlarge: {
      heightRatio: '2.25',
      fontSize: '1.25rem'
    }
  };
  if (!size) return sizes.medium;
  return sizes[size];
};

exports.getSizes = getSizes;

const getShadowColor = (palette, color) => {
  try {
    const hexColor = (0, _color.getNormalColor)(color, palette, palette.accents_4);
    const [r, g, b] = (0, _color.hexToRgb)(hexColor);
    return `0 5px 20px -5px rgb(${r} ${g} ${b}/ 40%);`;
  } catch (err) {
    return 'none';
  }
};

exports.getShadowColor = getShadowColor;

const getColors = (theme, disabled, color, status, helperColor) => {
  const palette = theme.palette;
  const isDark = theme.type === 'dark';
  const normalColor = (0, _color.getNormalColor)(color, palette);
  const normalHelperColor = (0, _color.getNormalColor)(helperColor, palette);
  const normalStatusColor = (0, _color.getNormalColor)(status, palette);
  const baseProps = {
    color: palette.text,
    bgColor: isDark ? palette.accents_1 : palette.accents_2,
    placeholderColor: isDark ? palette.accents_6 : palette.accents_3,
    borderColor: palette.accents_2,
    shadowColor: theme.expressiveness.shadowSmall
  };

  if (disabled) {
    return { ...baseProps,
      placeholderColor: isDark ? theme.palette.accents_4 : theme.palette.accents_3,
      color: theme.palette.accents_3,
      bgColor: isDark ? theme.palette.accents_2 : theme.palette.accents_1,
      borderColor: theme.palette.accents_2,
      helperColor: palette.text,
      hoverBorder: palette.foreground
    };
  }

  if (status === 'default' || (0, _assertion.isEmpty)(status)) {
    return color === 'default' ? { ...baseProps,
      helperColor: palette.text,
      hoverBorder: palette.foreground
    } : { ...baseProps,
      helperColor: normalHelperColor,
      hoverBorder: normalColor
    };
  }

  return { ...baseProps,
    hoverBorder: normalColor,
    borderColor: normalColor,
    helperColor: normalHelperColor,
    color: normalStatusColor,
    placeholderColor: (0, _color.addColorAlpha)(normalStatusColor, 0.5),
    bgColor: (0, _color.addColorAlpha)(normalStatusColor, 0.2),
    shadowColor: getShadowColor(palette, status)
  };
};

exports.getColors = getColors;