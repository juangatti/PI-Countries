import React from 'react';
import { Props as InputProps } from '../input/input-props';
import { ExcludedInputProps } from '../utils/prop-types';
export declare type TextareaHeightChangeMeta = {
    rowHeight: number;
};
interface Props {
    rows?: number;
    maxRows?: number;
    minRows?: number;
    onHeightChange?: (height: number, meta: TextareaHeightChangeMeta) => void;
    cacheMeasurements?: boolean;
    onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;
    onFocus?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;
    onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;
}
declare const defaultProps: {
    minRows: number;
    maxRows: number;
    cacheMeasurements: boolean;
    initialValue: string;
    width: string;
};
declare type NativeAttrs = Omit<React.TextareaHTMLAttributes<any>, keyof Props | keyof InputProps>;
declare type BaseAttrs = Omit<InputProps, ExcludedInputProps>;
export declare type TextareaProps = Props & typeof defaultProps & NativeAttrs & BaseAttrs;
declare const _default: React.ComponentType<Partial<{
    minRows: number;
    maxRows: number;
    cacheMeasurements: boolean;
    initialValue: string;
    width: string;
}> & Omit<Props & {
    minRows: number;
    maxRows: number;
    cacheMeasurements: boolean;
    initialValue: string;
    width: string;
} & NativeAttrs & BaseAttrs & React.RefAttributes<HTMLTextAreaElement>, "width" | "initialValue" | "maxRows" | "minRows" | "cacheMeasurements">>;
export default _default;
