"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _react = _interopRequireWildcard(require("react"));

var _useTheme = _interopRequireDefault(require("../use-theme"));

var _image = _interopRequireDefault(require("./image.skeleton"));

var _useRealShape = _interopRequireDefault(require("../use-real-shape"));

var _useCurrentState = _interopRequireDefault(require("../use-current-state"));

var _useResize = _interopRequireDefault(require("../use-resize"));

var _clsx = _interopRequireDefault(require("../utils/clsx"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  showSkeleton: true,
  autoResize: true,
  objectFit: 'scale-down',
  className: '',
  maxDelay: 3000
};

const Image = ({
  src,
  width,
  height,
  showSkeleton: showSkeletonProp,
  className,
  maxDelay,
  autoResize,
  objectFit,
  ...props
}) => {
  const theme = (0, _useTheme.default)();
  const [loading, setLoading] = (0, _react.useState)(true);
  const [showSkeleton, setShowSkeleton] = (0, _react.useState)(true);
  const {
    w,
    h
  } = (0, _react.useMemo)(() => {
    return {
      w: width ? typeof width === 'number' ? `${width}px` : width : 'auto',
      h: height ? typeof height === 'number' ? `${height}px` : height : 'auto'
    };
  }, [width, height]);
  const [zoomHeight, setZoomHeight, zoomHeightRef] = (0, _useCurrentState.default)(h);
  const imageRef = (0, _react.useRef)(null);
  const [shape, updateShape] = (0, _useRealShape.default)(imageRef);
  const showAnimation = showSkeletonProp && width && height;

  const imageLoaded = () => {
    setLoading(false);
  };

  (0, _react.useEffect)(() => {
    if (!showAnimation) return;
    if (!imageRef.current) return;

    if (imageRef.current.complete) {
      setLoading(false);
      setShowSkeleton(false);
    }
  });
  (0, _react.useEffect)(() => {
    const timer = setTimeout(() => {
      if (showAnimation) {
        setShowSkeleton(false);
      }

      clearTimeout(timer);
    }, maxDelay);
    return () => clearTimeout(timer);
  }, [loading]);
  /**
   * On mobile devices, the render witdth may be less than CSS width value.
   * If the image is scaled, set the height manually.
   * This is to ensure the aspect ratio of the image.
   *
   * If the image is auto width, ignore all.
   */

  (0, _react.useEffect)(() => {
    if (!autoResize) return;
    const notLoaded = shape.width === 0;
    const isAutoZoom = zoomHeightRef.current === 'auto';
    if (notLoaded || !width || !height) return;

    if (shape.width < width) {
      !isAutoZoom && setZoomHeight('auto');
    } else {
      isAutoZoom && setZoomHeight(h);
    }
  }, [shape, width]);
  (0, _useResize.default)(() => {
    if (!autoResize) return;
    updateShape();
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: _style.default.dynamic([["2293692961", [w, zoomHeight, theme.layout.radius, objectFit]]]) + " " + ((0, _clsx.default)('image', {
      'image-ready': !loading
    }, className) || ""),
    children: [showSkeleton && showAnimation && /*#__PURE__*/(0, _jsxRuntime.jsx)(_image.default, {
      opacity: loading ? 0.5 : 0
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("img", {
      ref: imageRef,
      width: width,
      height: height,
      onLoad: imageLoaded,
      src: src,
      ...props,
      className: _style.default.dynamic([["2293692961", [w, zoomHeight, theme.layout.radius, objectFit]]]) + " " + (props && props.className != null && props.className || "")
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_style.default, {
      id: "2293692961",
      dynamic: [w, zoomHeight, theme.layout.radius, objectFit],
      children: `.image.__jsx-style-dynamic-selector{width:${w};opacity:0;height:${zoomHeight};margin:0 auto;position:relative;border-radius:${theme.layout.radius};overflow:hidden;max-width:100%;-webkit-transition:-webkit-transform 250ms ease 0ms,opacity 200ms ease-in 0ms;-webkit-transition:transform 250ms ease 0ms,opacity 200ms ease-in 0ms;transition:transform 250ms ease 0ms,opacity 200ms ease-in 0ms;}.image-ready.__jsx-style-dynamic-selector{opacity:1;}img.__jsx-style-dynamic-selector{width:100%;height:100%;object-fit:${objectFit};display:block;}`
    })]
  });
};

Image.defaultProps = defaultProps;

var _default = /*#__PURE__*/_react.default.memo(Image);

exports.default = _default;
module.exports = exports.default;