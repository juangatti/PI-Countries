"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _react = _interopRequireWildcard(require("react"));

var _withDefaults = _interopRequireDefault(require("../utils/with-defaults"));

var _tooltipContent = _interopRequireDefault(require("./tooltip-content"));

var _useClickAway = _interopRequireDefault(require("../use-click-away"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const defaultProps = {
  initialVisible: false,
  hideArrow: false,
  shadow: true,
  rounded: false,
  color: 'default',
  contentColor: 'default',
  trigger: 'hover',
  placement: 'top',
  enterDelay: 0,
  leaveDelay: 0,
  offset: 12,
  className: '',
  portalClassName: '',
  onVisibleChange: () => {}
};

const Tooltip = ({
  children,
  initialVisible,
  content,
  offset,
  placement,
  portalClassName,
  enterDelay,
  leaveDelay,
  trigger,
  rounded,
  color,
  contentColor,
  shadow,
  className,
  onVisibleChange,
  hideArrow,
  visible: customVisible,
  ...props
}) => {
  const timer = (0, _react.useRef)();
  const ref = (0, _react.useRef)(null);
  const [visible, setVisible] = (0, _react.useState)(initialVisible);
  const contentProps = {
    color,
    contentColor,
    visible,
    shadow,
    offset,
    placement,
    rounded,
    hideArrow,
    parent: ref,
    className: portalClassName
  };

  const changeVisible = nextState => {
    const clear = () => {
      clearTimeout(timer.current);
      timer.current = undefined;
    };

    const handler = nextState => {
      setVisible(nextState);
      onVisibleChange(nextState);
      clear();
    };

    clear();

    if (nextState) {
      timer.current = window.setTimeout(() => handler(true), enterDelay);
      return;
    }

    timer.current = window.setTimeout(() => handler(false), leaveDelay);
  };

  const mouseEventHandler = next => trigger === 'hover' && changeVisible(next);

  const clickEventHandler = () => trigger === 'click' && changeVisible(!visible);

  (0, _useClickAway.default)(ref, () => trigger === 'click' && changeVisible(false));
  (0, _react.useEffect)(() => {
    if (customVisible === undefined) return;
    changeVisible(customVisible);
  }, [customVisible]);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    ref: ref,
    onClick: clickEventHandler,
    onMouseEnter: () => mouseEventHandler(true),
    onMouseLeave: () => mouseEventHandler(false),
    onFocus: () => mouseEventHandler(true),
    onBlur: () => mouseEventHandler(false),
    ...props,
    className: "jsx-303000714" + " " + (props && props.className != null && props.className || `tooltip ${className}`),
    children: [children, /*#__PURE__*/(0, _jsxRuntime.jsx)(_tooltipContent.default, { ...contentProps,
      children: content
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_style.default, {
      id: "303000714",
      children: ".tooltip.jsx-303000714{width:-webkit-max-content;width:-moz-max-content;width:max-content;display:inherit;}"
    })]
  });
};

var _default = (0, _withDefaults.default)(Tooltip, defaultProps);

exports.default = _default;
module.exports = exports.default;