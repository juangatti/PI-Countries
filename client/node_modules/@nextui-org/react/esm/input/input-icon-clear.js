import _JSXStyle from "styled-jsx/style";
import React, { useMemo } from 'react';
import clsx from '../utils/clsx';
import useTheme from '../use-theme';
import ClearIcon from '../utils/clear-icon';
import { getNormalColor } from '../utils/color';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

const InputIconClear = ({
  onClick,
  heightRatio,
  status,
  disabled,
  visible,
  underlined,
  hasContentRight,
  ...props
}) => {
  const theme = useTheme();
  const isDark = theme.type === 'dark';
  const width = useMemo(() => {
    return heightRatio ? `calc(10.66px * ${heightRatio})` : '18px';
  }, [heightRatio]);
  const color = useMemo(() => status === 'default' ? isDark ? theme.palette.accents_6 : theme.palette.accents_3 : getNormalColor(status, theme.palette), [status, isDark, theme.palette]);

  const clickHandler = event => {
    event.preventDefault();
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
    onClick && onClick(event);
  };

  return /*#__PURE__*/_jsxs("div", {
    onClick: clickHandler,
    ...props,
    className: _JSXStyle.dynamic([["2364806577", [underlined ? '2px' : theme.layout.gapHalf, disabled ? 'not-allowed' : 'pointer', color, disabled ? theme.palette.accents_3 : theme.palette.foreground, width, width]]]) + " " + (props && props.className != null && props.className || clsx('clear-icon', {
      visible,
      'dark-theme': isDark,
      underlined: underlined,
      'has-content-right': hasContentRight
    }) || ""),
    children: [/*#__PURE__*/_jsx(ClearIcon, {
      fill: "currentColor"
    }), /*#__PURE__*/_jsx(_JSXStyle, {
      id: "2364806577",
      dynamic: [underlined ? '2px' : theme.layout.gapHalf, disabled ? 'not-allowed' : 'pointer', color, disabled ? theme.palette.accents_3 : theme.palette.foreground, width, width],
      children: `.clear-icon.__jsx-style-dynamic-selector{position:absolute;right:0;margin:0;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:auto;padding:0 ${underlined ? '2px' : theme.layout.gapHalf};cursor:${disabled ? 'not-allowed' : 'pointer'};box-sizing:border-box;-webkit-transition:color 250ms ease 0s,-webkit-transform 250ms ease 0s;-webkit-transition:color 250ms ease 0s,transform 250ms ease 0s;transition:color 250ms ease 0s,transform 250ms ease 0s;color:${color};visibility:hidden;-webkit-transform:translateX(20%);-ms-transform:translateX(20%);transform:translateX(20%);opacity:0;}.has-content-right.__jsx-style-dynamic-selector{padding:0;position:relative;-webkit-transform:translateX(30%);-ms-transform:translateX(30%);transform:translateX(30%);}.visible.__jsx-style-dynamic-selector{visibility:visible;-webkit-transform:translateX(0);-ms-transform:translateX(0);transform:translateX(0);opacity:1;}.clear-icon.__jsx-style-dynamic-selector:hover{color:${disabled ? theme.palette.accents_3 : theme.palette.foreground};}.clear-icon.__jsx-style-dynamic-selector svg{color:currentColor;width:${width};height:${width};}`
    })]
  });
};

const MemoInputIconClear = /*#__PURE__*/React.memo(InputIconClear);
export default MemoInputIconClear;