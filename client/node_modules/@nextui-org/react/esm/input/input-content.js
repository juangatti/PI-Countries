import _JSXStyle from "styled-jsx/style";
import React, { useMemo } from 'react';
import useTheme from '../use-theme';
import { getNormalColor } from '../utils/color';
import clsx from '../utils/clsx';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

const InputContent = ({
  content,
  ratio,
  status,
  isLeft,
  clickable,
  applyStyles = true,
  onClick,
  ...props
}) => {
  const theme = useTheme();
  const width = useMemo(() => {
    return `calc(${ratio} * ${theme.layout.gap} * .42)`;
  }, [theme.layout.gap, ratio]);
  const padding = useMemo(() => {
    return `calc(${ratio} * ${theme.layout.gap} * .3)`;
  }, [theme.layout.gap, ratio]);
  return /*#__PURE__*/_jsxs("span", {
    onClick: e => onClick(isLeft ? 'left' : 'right', e),
    ...props,
    className: _JSXStyle.dynamic([["2873957642", [width, padding, status === 'default' ? theme.palette.text : getNormalColor(status, theme.palette), clickable ? 'pointer' : 'default', clickable ? 'auto' : 'none']]]) + " " + (props && props.className != null && props.className || clsx({
      'input-content': applyStyles
    }) || ""),
    children: [content, /*#__PURE__*/_jsx(_JSXStyle, {
      id: "2873957642",
      dynamic: [width, padding, status === 'default' ? theme.palette.text : getNormalColor(status, theme.palette), clickable ? 'pointer' : 'default', clickable ? 'auto' : 'none'],
      children: `.input-content.__jsx-style-dynamic-selector{box-sizing:content-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:${width};height:100%;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;vertical-align:center;margin:0;padding:0 ${padding};color:${status === 'default' ? theme.palette.text : getNormalColor(status, theme.palette)};line-height:1;position:relative;cursor:${clickable ? 'pointer' : 'default'};pointer-events:${clickable ? 'auto' : 'none'};}`
    })]
  });
};

const MemoContentIcon = /*#__PURE__*/React.memo(InputContent);
export default MemoContentIcon;