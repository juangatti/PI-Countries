import _JSXStyle from "styled-jsx/style";
import React, { useMemo } from 'react';
import useTheme from '../use-theme';
import clsx from '../utils/clsx';
import { addColorAlpha } from '../utils/color';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";

const InputLabel = ({
  children,
  isRight,
  fontSize,
  bgColor,
  radius,
  status,
  color,
  bordered,
  underlined,
  borderWeight,
  ...props
}) => {
  const theme = useTheme();
  const isDark = theme.type === 'dark';
  const inputBgColor = useMemo(() => {
    return underlined ? 'transparent' : status === 'default' && !bordered ? isDark ? theme.palette.accents_3 : addColorAlpha(theme.palette.accents_3, 0.3) : bgColor || theme.palette.accents_2;
  }, [isDark, status, underlined, bgColor, bordered]);
  return /*#__PURE__*/_jsxs("span", { ...props,
    className: _JSXStyle.dynamic([["4239241287", [inputBgColor, theme.layout.gapHalf, color || theme.palette.accents_4, fontSize, radius, radius, radius, radius, borderWeight, color || theme.palette.accents_4]]]) + " " + (props && props.className != null && props.className || clsx('input-label', {
      right: isRight,
      left: !isRight,
      underlined,
      bordered
    }) || ""),
    children: [children, /*#__PURE__*/_jsx(_JSXStyle, {
      id: "4239241287",
      dynamic: [inputBgColor, theme.layout.gapHalf, color || theme.palette.accents_4, fontSize, radius, radius, radius, radius, borderWeight, color || theme.palette.accents_4],
      children: `.input-label.__jsx-style-dynamic-selector{position:relative;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;width:initial;height:100%;font-weight:500;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;pointer-events:none;margin:0;background:${inputBgColor};padding:0 ${theme.layout.gapHalf};color:${color || theme.palette.accents_4};font-size:${fontSize};line-height:1;}.right.__jsx-style-dynamic-selector{border-top-right-radius:${radius};border-bottom-right-radius:${radius};}.left.__jsx-style-dynamic-selector{border-top-left-radius:${radius};border-bottom-left-radius:${radius};}.underlined.left.__jsx-style-dynamic-selector:after,.underlined.right.__jsx-style-dynamic-selector:before{position:absolute;content:'';height:70%;top:15%;bottom:0;width:calc(${borderWeight} / 2);box-shadow:0 2px 4px 0px rgb(0 0 0 / 8%);background:${color || theme.palette.accents_4};}.underlined.left.__jsx-style-dynamic-selector:after{right:0;}.underlined.right.__jsx-style-dynamic-selector:before{left:0;}.bordered.__jsx-style-dynamic-selector:after,.bordered.__jsx-style-dynamic-selector:before{display:none;}`
    })]
  });
};

const MemoInputLabel = /*#__PURE__*/React.memo(InputLabel);
export default MemoInputLabel;