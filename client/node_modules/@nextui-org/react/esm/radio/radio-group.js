import _JSXStyle from "styled-jsx/style";
import React, { useEffect, useMemo, useState } from 'react';
import withDefaults from '../utils/with-defaults';
import { RadioContext } from './radio-context';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  disabled: false,
  size: 'medium',
  color: 'primary',
  textColor: 'default',
  className: '',
  row: false
};
export const getRadioSize = size => {
  const sizes = {
    mini: '14px',
    small: '16px',
    medium: '20px',
    large: '24px',
    xlarge: '28px'
  };
  if (typeof size === 'number') return `${size}px`;
  return sizes[size];
};

const RadioGroup = ({
  disabled,
  onChange,
  value,
  size,
  color,
  textColor,
  children,
  className,
  initialValue,
  row,
  ...props
}) => {
  const [selfVal, setSelfVal] = useState(initialValue);

  const updateState = nextValue => {
    setSelfVal(nextValue);
    onChange && onChange(nextValue);
  };

  const providerValue = useMemo(() => {
    return {
      updateState,
      disabledAll: disabled,
      inGroup: true,
      color,
      textColor,
      value: selfVal
    };
  }, [disabled, selfVal]);
  const fontSize = useMemo(() => getRadioSize(size), [size]);
  const groupGap = `calc(${fontSize} * 1)`;
  useEffect(() => {
    if (value === undefined) return;
    setSelfVal(value);
  }, [value]);
  return /*#__PURE__*/_jsxs(RadioContext.Provider, {
    value: providerValue,
    children: [/*#__PURE__*/_jsx("fieldset", {
      role: "radiogroup",
      ...props,
      className: _JSXStyle.dynamic([["3133287453", [row ? 'row' : 'column', row ? 0 : groupGap, row ? groupGap : 0, fontSize]]]) + " " + (props && props.className != null && props.className || `radio-group ${className}`),
      children: children
    }), /*#__PURE__*/_jsx(_JSXStyle, {
      id: "3133287453",
      dynamic: [row ? 'row' : 'column', row ? 0 : groupGap, row ? groupGap : 0, fontSize],
      children: `fieldset.__jsx-style-dynamic-selector{border:0;margin:0;padding:0;}.radio-group.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:${row ? 'row' : 'column'};-ms-flex-direction:${row ? 'row' : 'column'};flex-direction:${row ? 'row' : 'column'};}.radio-group.__jsx-style-dynamic-selector .radio{margin-top:${row ? 0 : groupGap};margin-right:${row ? groupGap : 0};--radio-size:${fontSize};}`
    })]
  });
};

export default withDefaults(RadioGroup, defaultProps);