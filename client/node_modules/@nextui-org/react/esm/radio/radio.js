import _JSXStyle from "styled-jsx/style";
import React, { useEffect, useMemo, useState } from 'react';
import useTheme from '../use-theme';
import { useRadioContext } from './radio-context';
import { getRadioSize } from './radio-group';
import RadioDescription from './radio-description';
import { pickChild } from '../utils/collections';
import useWarning from '../use-warning';
import useKeyboard, { KeyCode } from '../use-keyboard';
import { getFocusStyles } from '../utils/styles';
import { getNormalColor } from '../utils/color';
import { __DEV__ } from '../utils/assertion';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  size: 'medium',
  color: 'primary',
  textColor: 'default',
  disabled: false,
  squared: false,
  className: ''
};

const Radio = ({
  className,
  checked,
  onChange,
  squared,
  disabled,
  size,
  color,
  textColor,
  value: radioValue,
  children,
  ...props
}) => {
  const theme = useTheme();
  const [selfChecked, setSelfChecked] = useState(!!checked);
  const {
    value: groupValue,
    disabledAll,
    inGroup,
    color: groupColor,
    textColor: textGroupColor,
    updateState
  } = useRadioContext();
  const [withoutDescChildren, DescChildren] = pickChild(children, RadioDescription);

  if (inGroup && __DEV__) {
    if (checked !== undefined) {
      useWarning('Remove props "checked" if in the Radio.Group.', 'Radio');
    }

    if (radioValue === undefined) {
      useWarning('Props "value" must be deinfed if in the Radio.Group.', 'Radio');
    }
  }

  useEffect(() => {
    setSelfChecked(groupValue === radioValue);
  }, [groupValue, radioValue]);
  const fontSize = useMemo(() => getRadioSize(size), [size]);
  const isDisabled = useMemo(() => disabled || disabledAll, [disabled, disabledAll]);
  const radius = squared ? '2px' : '50%';
  const radioColor = useMemo(() => isDisabled ? theme.palette.accents_4 : getNormalColor(color || groupColor, theme.palette, theme.palette.foreground), [color, groupColor, isDisabled, theme.palette]);
  const labelColor = useMemo(() => isDisabled ? theme.palette.accents_4 : getNormalColor(textColor || textGroupColor, theme.palette, theme.palette.text), [textColor, textGroupColor, isDisabled, theme.palette]);
  const {
    className: focusClassName,
    styles: focusStyles
  } = getFocusStyles(theme);

  const changeHandler = event => {
    if (isDisabled) return;
    const selfEvent = {
      target: {
        checked: !selfChecked
      },
      stopPropagation: event.stopPropagation,
      preventDefault: event.preventDefault,
      nativeEvent: event
    };
    setSelfChecked(!selfChecked);

    if (inGroup) {
      updateState && updateState(radioValue);
    }

    onChange && onChange(selfEvent);
  };

  const {
    bindings
  } = useKeyboard(event => {
    changeHandler(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true
  });
  useEffect(() => {
    if (checked === undefined) return;
    setSelfChecked(Boolean(checked));
  }, [checked]);
  return /*#__PURE__*/_jsxs("label", {
    role: "radio",
    "aria-checked": selfChecked,
    ...props,
    ...bindings,
    className: _JSXStyle.dynamic([["3122260096", [fontSize, labelColor, isDisabled ? 'not-allowed' : 'pointer', radius, radius, theme.palette.border, radioColor, theme.palette.border]]]) + " " + (bindings && bindings.className != null && bindings.className || props && props.className != null && props.className || `radio ${className}`),
    children: [/*#__PURE__*/_jsx("input", {
      type: "radio",
      tabIndex: -1,
      value: radioValue,
      checked: selfChecked,
      onChange: changeHandler,
      ...props,
      className: _JSXStyle.dynamic([["3122260096", [fontSize, labelColor, isDisabled ? 'not-allowed' : 'pointer', radius, radius, theme.palette.border, radioColor, theme.palette.border]]]) + " " + (props && props.className != null && props.className || "")
    }), /*#__PURE__*/_jsxs("span", {
      className: _JSXStyle.dynamic([["3122260096", [fontSize, labelColor, isDisabled ? 'not-allowed' : 'pointer', radius, radius, theme.palette.border, radioColor, theme.palette.border]]]) + " " + "name",
      children: [/*#__PURE__*/_jsx("span", {
        tabIndex: disabled ? -1 : 0,
        className: _JSXStyle.dynamic([["3122260096", [fontSize, labelColor, isDisabled ? 'not-allowed' : 'pointer', radius, radius, theme.palette.border, radioColor, theme.palette.border]]]) + " " + `point ${selfChecked ? 'active' : ''} ${isDisabled ? 'disabled' : ''} ${focusClassName}`
      }), withoutDescChildren]
    }), DescChildren && DescChildren, /*#__PURE__*/_jsx(_JSXStyle, {
      id: "3122260096",
      dynamic: [fontSize, labelColor, isDisabled ? 'not-allowed' : 'pointer', radius, radius, theme.palette.border, radioColor, theme.palette.border],
      children: `input.__jsx-style-dynamic-selector{opacity:0;overflow:hidden;width:1px;height:1px;top:-1000px;right:-1000px;position:fixed;}.radio.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;width:initial;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;position:relative;--radio-size:${fontSize};}label.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;color:${labelColor};cursor:${isDisabled ? 'not-allowed' : 'pointer'};}.name.__jsx-style-dynamic-selector{font-size:var(--radio-size);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}.point.__jsx-style-dynamic-selector{width:var(--radio-size);height:var(--radio-size);border-radius:${radius};-webkit-transition:all 0.25s ease;transition:all 0.25s ease;position:relative;display:inline-block;margin-right:calc(var(--radio-size) * 0.375);}.point.__jsx-style-dynamic-selector:after{content:'';display:block;position:absolute;width:var(--radio-size);height:var(--radio-size);border-radius:${radius};box-sizing:border-box;-webkit-transition:all 0.25s ease;transition:all 0.25s ease;border:2px solid ${theme.palette.border};}.point.active.__jsx-style-dynamic-selector:after{border:calc(var(--radio-size) * 0.34) solid ${radioColor};}label.__jsx-style-dynamic-selector:hover .point.__jsx-style-dynamic-selector:not(.active):not(.disabled){background:${theme.palette.border};}`
    }), focusStyles]
  });
};

Radio.defaultProps = defaultProps;

if (__DEV__) {
  Radio.displayName = 'NextUI - Radio';
}

export default Radio;