import _JSXStyle from "styled-jsx/style";
import React, { useMemo, useState, useRef, useEffect } from 'react';
import useTheme from '../use-theme';
import { getNormalColor, addColorAlpha } from '../utils/color';
import clsx from '../utils/clsx';
import { getNormalWeight } from '../utils/dimensions';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  text: '',
  stacked: false,
  size: 'medium',
  borderWeight: 'normal',
  textColor: 'default',
  squared: false,
  zoomed: false,
  className: ''
};

const getSize = size => {
  const sizes = {
    mini: '1.375rem',
    small: '1.823rem',
    medium: '2.43rem',
    large: '3.23rem',
    xlarge: '4.3rem'
  };
  if (typeof size === 'number') return `${size}px`;
  return sizes[size];
};

const safeText = text => {
  if (text.length <= 4) return text;
  return text.slice(0, 3);
};

const Avatar = ({
  src,
  stacked,
  text,
  size,
  borderWeight,
  squared,
  zoomed,
  bordered,
  color,
  textColor,
  icon,
  pointer,
  alt,
  className,
  ...props
}) => {
  const theme = useTheme();
  const showText = !src;
  const radius = squared ? '33%' : '50%';
  const marginLeft = stacked ? '-.625rem' : 0;
  const [ready, setReady] = useState(false);
  const width = useMemo(() => getSize(size), [size]);
  const border = useMemo(() => getNormalWeight(borderWeight), [borderWeight]);
  const imgRef = useRef(null);
  useEffect(() => {
    var _imgRef$current;

    (imgRef == null ? void 0 : (_imgRef$current = imgRef.current) == null ? void 0 : _imgRef$current.complete) && setReady(true);
  }, []);
  const avatarColor = useMemo(() => getNormalColor(color, theme.palette, theme.palette.accents_2), [color, theme.palette]);
  const avatarTextColor = useMemo(() => getNormalColor(textColor, theme.palette, theme.palette.text), [textColor, theme.palette]);
  const hoverBackground = useMemo(() => color === 'gradient' || !bordered ? avatarColor : !src ? avatarColor : addColorAlpha(avatarColor, 0.6), [src, color, avatarColor, bordered]);
  return /*#__PURE__*/_jsxs("span", { ...props,
    className: _JSXStyle.dynamic([["822806442", [width, width, width, width, radius, pointer ? 'pointer' : 'auto', marginLeft, width, width, avatarColor, border, theme.palette.background, radius, border, theme.palette.background, width, avatarTextColor, hoverBackground, color === 'gradient' ? 'opacity(0.6)' : 'none', zoomed && 'scale(1.125)']]]) + " " + (props && props.className != null && props.className || clsx('avatar', {
      bordered,
      'only-text-avatar': showText
    }, className) || ""),
    children: [/*#__PURE__*/_jsx("span", {
      className: _JSXStyle.dynamic([["822806442", [width, width, width, width, radius, pointer ? 'pointer' : 'auto', marginLeft, width, width, avatarColor, border, theme.palette.background, radius, border, theme.palette.background, width, avatarTextColor, hoverBackground, color === 'gradient' ? 'opacity(0.6)' : 'none', zoomed && 'scale(1.125)']]]) + " " + "avatar-bg"
    }), !showText && /*#__PURE__*/_jsx("img", {
      ref: imgRef,
      src: src,
      alt: alt,
      onLoad: () => setReady(true),
      className: _JSXStyle.dynamic([["822806442", [width, width, width, width, radius, pointer ? 'pointer' : 'auto', marginLeft, width, width, avatarColor, border, theme.palette.background, radius, border, theme.palette.background, width, avatarTextColor, hoverBackground, color === 'gradient' ? 'opacity(0.6)' : 'none', zoomed && 'scale(1.125)']]]) + " " + (clsx('avatar-img', {
        'avatar-ready': ready
      }) || "")
    }), showText && !icon && /*#__PURE__*/_jsx("span", {
      className: _JSXStyle.dynamic([["822806442", [width, width, width, width, radius, pointer ? 'pointer' : 'auto', marginLeft, width, width, avatarColor, border, theme.palette.background, radius, border, theme.palette.background, width, avatarTextColor, hoverBackground, color === 'gradient' ? 'opacity(0.6)' : 'none', zoomed && 'scale(1.125)']]]) + " " + "avatar-text",
      children: safeText(text)
    }), icon && /*#__PURE__*/_jsx("span", {
      className: _JSXStyle.dynamic([["822806442", [width, width, width, width, radius, pointer ? 'pointer' : 'auto', marginLeft, width, width, avatarColor, border, theme.palette.background, radius, border, theme.palette.background, width, avatarTextColor, hoverBackground, color === 'gradient' ? 'opacity(0.6)' : 'none', zoomed && 'scale(1.125)']]]) + " " + "icon",
      children: icon
    }), /*#__PURE__*/_jsx(_JSXStyle, {
      id: "822806442",
      dynamic: [width, width, width, width, radius, pointer ? 'pointer' : 'auto', marginLeft, width, width, avatarColor, border, theme.palette.background, radius, border, theme.palette.background, width, avatarTextColor, hoverBackground, color === 'gradient' ? 'opacity(0.6)' : 'none', zoomed && 'scale(1.125)'],
      children: `.avatar.__jsx-style-dynamic-selector{position:relative;z-index:1;min-width:${width};min-height:${width};width:${width};height:${width};display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;box-sizing:border-box;overflow:hidden;border-radius:${radius};vertical-align:top;cursor:${pointer ? 'pointer' : 'auto'};margin:0 0 0 ${marginLeft};-webkit-transition:all 0.25s ease;transition:all 0.25s ease;}.avatar-bg.__jsx-style-dynamic-selector{position:absolute;top:0;left:0;right:0;bottom:0;width:${width};height:${width};background:${avatarColor};-webkit-transition:all 0.25s ease;transition:all 0.25s ease;}.avatar.bordered.__jsx-style-dynamic-selector{padding:${border};}.avatar.__jsx-style-dynamic-selector:first-child{margin:0;}.avatar-img.__jsx-style-dynamic-selector{z-index:99;opacity:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;background:${theme.palette.background};border-radius:${radius};-webkit-transition:-webkit-transform 250ms ease 0ms,opacity 200ms ease-in 0ms;-webkit-transition:transform 250ms ease 0ms,opacity 200ms ease-in 0ms;transition:transform 250ms ease 0ms,opacity 200ms ease-in 0ms;width:100%;height:100%;object-fit:cover;}.avatar-ready.__jsx-style-dynamic-selector{opacity:1;}.bordered.__jsx-style-dynamic-selector .avatar-img.__jsx-style-dynamic-selector{border:${border} solid ${theme.palette.background};}.avatar-text.__jsx-style-dynamic-selector{position:absolute;left:50%;top:50%;font-size:calc(0.8em + ${width} * 0.1);text-align:center;color:${avatarTextColor};-webkit-transform:translate(-50%,-50%) scale(0.65);-ms-transform:translate(-50%,-50%) scale(0.65);transform:translate(-50%,-50%) scale(0.65);white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}.icon.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:absolute;left:50%;top:50%;text-align:center;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}.bordered.__jsx-style-dynamic-selector:hover .avatar-bg.__jsx-style-dynamic-selector{background:${hoverBackground};-webkit-filter:${color === 'gradient' ? 'opacity(0.6)' : 'none'};filter:${color === 'gradient' ? 'opacity(0.6)' : 'none'};}.avatar.__jsx-style-dynamic-selector:hover .avatar-img.__jsx-style-dynamic-selector{-webkit-transform:${zoomed && 'scale(1.125)'};-ms-transform:${zoomed && 'scale(1.125)'};transform:${zoomed && 'scale(1.125)'};}.avatar.__jsx-style-dynamic-selector:hover .avatar-bg.__jsx-style-dynamic-selector{box-shadow:inset 0 0 40px 0 rgb(0 0 0 / 14%);}`
    })]
  });
};

Avatar.defaultProps = defaultProps;
export default /*#__PURE__*/React.memo(Avatar);