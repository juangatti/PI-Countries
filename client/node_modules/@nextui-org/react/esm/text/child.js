import _JSXStyle from "styled-jsx/style";
import React, { useMemo } from 'react';
import withDefaults from '../utils/with-defaults';
import useTheme from '../use-theme';
import { getNormalColor } from '../utils/color';
import clsx from '../utils/clsx';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  color: 'default',
  className: ''
};

const TextChild = ({
  children,
  tag,
  className,
  color: userColor,
  transform,
  margin: marginProp,
  weight,
  size,
  ...props
}) => {
  const theme = useTheme();
  const Component = tag;
  const color = useMemo(() => getNormalColor(userColor, theme.palette), [userColor, theme.palette]);
  const fontSize = useMemo(() => {
    if (!size) return 'inherit';
    if (typeof size === 'number') return `${size}px`;
    return size;
  }, [size]);
  const margin = useMemo(() => {
    if (!marginProp) return 'inherit';
    if (typeof marginProp === 'number') return `${size}px`;
    return marginProp;
  }, [marginProp]);
  return /*#__PURE__*/_jsxs(React.Fragment, {
    children: [/*#__PURE__*/_jsx(Component, { ...props,
      className: _JSXStyle.dynamic([["2179963912", [tag, color, margin, weight, transform, fontSize]]]) + " " + (props && props.className != null && props.className || clsx({
        'custom-size': !!size
      }, className) || ""),
      children: children
    }), /*#__PURE__*/_jsx(_JSXStyle, {
      id: "2179963912",
      dynamic: [tag, color, margin, weight, transform, fontSize],
      children: `${tag}.__jsx-style-dynamic-selector{color:${color};margin:${margin};font-weight:${weight};text-transform:${transform};}.custom-size.__jsx-style-dynamic-selector{font-size:${fontSize};}`
    })]
  });
};

const MemoTextChild = /*#__PURE__*/React.memo(TextChild);
export default withDefaults(MemoTextChild, defaultProps);