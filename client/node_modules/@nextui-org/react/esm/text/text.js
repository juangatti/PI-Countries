import React, { useMemo } from 'react';
import withDefaults from '../utils/with-defaults';
import TextChild from './child';
import { jsx as _jsx } from "react/jsx-runtime";
const defaultProps = {
  h1: false,
  h2: false,
  h3: false,
  h4: false,
  h5: false,
  h6: false,
  p: false,
  b: false,
  small: false,
  transform: 'none',
  i: false,
  span: false,
  del: false,
  em: false,
  blockquote: false,
  weight: 'noset',
  className: '',
  color: 'default'
};

const getModifierChild = (tags, children, size, transform) => {
  if (!tags.length) return children;
  const nextTag = tags.slice(1, tags.length);
  return /*#__PURE__*/_jsx(TextChild, {
    tag: tags[0],
    size: size,
    transform: transform,
    children: getModifierChild(nextTag, children, size)
  });
};

const Text = ({
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  b,
  small,
  i,
  span,
  del,
  em,
  blockquote,
  transform,
  size,
  margin,
  weight,
  children,
  className,
  ...props
}) => {
  const elements = {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    p,
    blockquote
  };
  const inlineElements = {
    span,
    small,
    b,
    em,
    i,
    del
  };
  const names = Object.keys(elements).filter(name => elements[name]);
  const inlineNames = Object.keys(inlineElements).filter(name => inlineElements[name]);
  /**
   *  Render element "p" only if no element is found.
   *  If there is only one modifier, just rendered one modifier element
   *  e.g.
   *    <Text /> => <p />
   *    <Text em /> => <em />
   *    <Text p em /> => <p><em>children</em></p>
   *
   */

  const tag = useMemo(() => {
    if (names[0]) return names[0];
    if (inlineNames[0]) return inlineNames[0];
    return 'p';
  }, [names, inlineNames]);
  const renderableChildElements = inlineNames.filter(name => name !== tag);
  const modifers = useMemo(() => {
    if (!renderableChildElements.length) return children;
    return getModifierChild(renderableChildElements, children, size, transform);
  }, [renderableChildElements, children, size, transform]);
  return /*#__PURE__*/_jsx(TextChild, {
    className: className,
    transform: transform,
    tag: tag,
    margin: margin,
    size: size,
    weight: weight,
    ...props,
    children: modifers
  });
};

const MemoText = /*#__PURE__*/React.memo(Text);
export default withDefaults(MemoText, defaultProps);