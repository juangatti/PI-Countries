import React, { PropsWithoutRef, RefAttributes } from 'react';
import { NormalColors, NormalLoaders, NormalSizes, NormalWeights } from '../utils/prop-types';
import ButtonGroup from './button-group';
export interface Props {
    color?: NormalColors | string;
    size?: NormalSizes;
    light?: boolean;
    flat?: boolean;
    loading?: boolean;
    shadow?: boolean;
    auto?: boolean;
    animated?: boolean;
    rounded?: boolean;
    disabled?: boolean;
    bordered?: boolean;
    ghost?: boolean;
    borderWeight?: NormalWeights;
    loaderType?: NormalLoaders;
    htmlType?: React.ButtonHTMLAttributes<unknown>['type'];
    icon?: React.ReactNode;
    iconRight?: React.ReactNode;
    onClick?: React.MouseEventHandler<HTMLButtonElement>;
    className?: string;
    style?: React.CSSProperties;
}
declare const defaultProps: {
    color: string;
    size: "mini" | "small" | "medium" | "large" | "xlarge";
    htmlType: "button" | "reset" | "submit" | undefined;
    loaderType: "default" | "gradient" | "points" | "points-opacity" | "spinner";
    borderWeight: "light" | "normal" | "bold" | undefined;
    flat: boolean;
    light: boolean;
    loading: boolean;
    rounded: boolean;
    shadow: boolean;
    auto: boolean;
    bordered: boolean;
    ghost: boolean;
    animated: boolean;
    disabled: boolean;
    className: string;
};
declare type NativeAttrs = Omit<React.ButtonHTMLAttributes<unknown>, keyof Props>;
export declare type ButtonProps = Props & typeof defaultProps & NativeAttrs;
declare type ButtonComponent<T, P = {}> = React.ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>> & {
    Group: typeof ButtonGroup;
};
declare type ComponentProps = Partial<typeof defaultProps> & Omit<Props, keyof typeof defaultProps> & NativeAttrs;
declare const _default: ButtonComponent<HTMLButtonElement, ComponentProps>;
export default _default;
