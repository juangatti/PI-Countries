import _JSXStyle from "styled-jsx/style";
import React, { useMemo } from 'react';
import withDefaults from '../utils/with-defaults';
import useTheme from '../use-theme';
import LinkIcon from './icon';
import { addColorAlpha, getNormalColor } from '../utils/color';
import { __DEV__ } from '../utils/assertion';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  href: '',
  icon: false,
  underline: false,
  block: false,
  className: ''
};
const Link = /*#__PURE__*/React.forwardRef(({
  href,
  color,
  underline,
  children,
  className,
  block,
  icon,
  ...props
}, ref) => {
  const theme = useTheme();
  const linkColor = useMemo(() => getNormalColor(color || block, theme.palette, theme.palette.link), [color, theme.palette]);
  const hoverColor = useMemo(() => color || block ? addColorAlpha(linkColor, 0.8) : addColorAlpha(theme.palette.text, 0.8), [color, block, theme, linkColor]);
  const padding = block ? theme.layout.gapQuarter : '0';
  const decoration = underline ? 'underline' : 'none';
  return /*#__PURE__*/_jsxs("a", {
    href: href,
    ...props,
    ref: ref,
    className: _JSXStyle.dynamic([["250630921", [linkColor, padding, padding, block ? theme.layout.radius : 0, decoration, block ? addColorAlpha(linkColor, 0.2) : 'inherit', hoverColor]]]) + " " + (props && props.className != null && props.className || `link ${className}`),
    children: [children, icon && /*#__PURE__*/_jsx(LinkIcon, {}), /*#__PURE__*/_jsx(_JSXStyle, {
      id: "250630921",
      dynamic: [linkColor, padding, padding, block ? theme.layout.radius : 0, decoration, block ? addColorAlpha(linkColor, 0.2) : 'inherit', hoverColor],
      children: `.link.__jsx-style-dynamic-selector{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;line-height:inherit;color:${linkColor};-webkit-text-decoration:none;text-decoration:none;padding:calc(${padding} * 0.8) calc(${padding} * 1.7);border-radius:${block ? theme.layout.radius : 0};width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;-webkit-transition:all 0.25s ease;transition:all 0.25s ease;}.link.__jsx-style-dynamic-selector:hover,.link.__jsx-style-dynamic-selector:active,.link.__jsx-style-dynamic-selector:focus{-webkit-text-decoration:${decoration};text-decoration:${decoration};}.link.__jsx-style-dynamic-selector:hover{background-color:${block ? addColorAlpha(linkColor, 0.2) : 'inherit'};color:${hoverColor};}`
    })]
  });
});

if (__DEV__) {
  Link.displayName = 'Link';
}

const MemoLink = /*#__PURE__*/React.memo(Link);
export default withDefaults(MemoLink, defaultProps);