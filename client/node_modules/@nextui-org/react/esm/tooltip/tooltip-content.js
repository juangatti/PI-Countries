import _JSXStyle from "styled-jsx/style";
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import useTheme from '../use-theme';
import usePortal from '../use-portal';
import useResize from '../use-resize';
import CSSTransition from '../utils/css-transition';
import useClickAnyWhere from '../use-click-anywhere';
import { getColors } from './styles';
import { getPlacement, defaultTooltipPlacement, getIconPlacement } from './placement';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultRect = {
  top: -1000,
  left: -1000,
  right: -1000,
  bottom: -1000,
  width: 0,
  height: 0
};

const getRect = ref => {
  if (!ref || !ref.current) return defaultRect;
  const rect = ref.current.getBoundingClientRect();
  return { ...rect,
    width: rect.width || rect.right - rect.left,
    height: rect.height || rect.bottom - rect.top,
    top: rect.top + document.documentElement.scrollTop,
    bottom: rect.bottom + document.documentElement.scrollTop,
    left: rect.left + document.documentElement.scrollLeft,
    right: rect.right + document.documentElement.scrollLeft
  };
};

const TooltipContent = ({
  children,
  parent,
  visible,
  offset,
  placement,
  color,
  contentColor,
  rounded,
  className,
  hideArrow,
  shadow,
  ...props
}) => {
  const theme = useTheme();
  const el = usePortal('tooltip');
  const selfRef = useRef(null);
  const [rect, setRect] = useState(defaultTooltipPlacement);
  const colors = useMemo(() => getColors(color, contentColor, theme.palette), [color, contentColor, theme.palette]);
  if (!parent) return null;

  const updateRect = () => {
    const pos = getPlacement(placement, getRect(parent), offset);
    setRect(pos);
  };

  const {
    transform,
    top,
    left,
    right,
    bottom
  } = useMemo(() => getIconPlacement(placement, 5), [placement]);
  const borderRadius = useMemo(() => rounded ? '20px' : theme.layout.radius, [rounded]);
  useResize(updateRect);
  useClickAnyWhere(() => updateRect());
  useEffect(() => {
    updateRect();
  }, [visible]);

  const preventHandler = event => {
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
  };

  if (!el) return null;
  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsx(CSSTransition, {
    name: "wrapper",
    visible: visible,
    enterTime: 20,
    leaveTime: 20,
    children: /*#__PURE__*/_jsxs("div", {
      ref: selfRef,
      onClick: preventHandler,
      ...props,
      className: _JSXStyle.dynamic([["1431256522", [rect.top, rect.left, rect.transform, colors.bgColor, colors.color, borderRadius, theme.layout.gapQuarter, theme.layout.gapHalf, shadow ? theme.expressiveness.shadowMedium : 'none', colors.bgColor, left, top, right, bottom, transform, rect.top]]]) + " " + (props && props.className != null && props.className || `tooltip-content ${className}`),
      children: [/*#__PURE__*/_jsx("div", {
        role: "tooltip",
        className: _JSXStyle.dynamic([["1431256522", [rect.top, rect.left, rect.transform, colors.bgColor, colors.color, borderRadius, theme.layout.gapQuarter, theme.layout.gapHalf, shadow ? theme.expressiveness.shadowMedium : 'none', colors.bgColor, left, top, right, bottom, transform, rect.top]]]) + " " + `inner ${!hideArrow ? 'arrow' : ''}`,
        children: children
      }), /*#__PURE__*/_jsx(_JSXStyle, {
        id: "1431256522",
        dynamic: [rect.top, rect.left, rect.transform, colors.bgColor, colors.color, borderRadius, theme.layout.gapQuarter, theme.layout.gapHalf, shadow ? theme.expressiveness.shadowMedium : 'none', colors.bgColor, left, top, right, bottom, transform, rect.top],
        children: `.tooltip-content.__jsx-style-dynamic-selector{position:absolute;width:auto;top:calc(${rect.top} + 6px);left:${rect.left};-webkit-transform:${rect.transform};-ms-transform:${rect.transform};transform:${rect.transform};background:${colors.bgColor};color:${colors.color};border-radius:${borderRadius};padding:${theme.layout.gapQuarter} ${theme.layout.gapHalf};opacity:0;z-index:1000;box-shadow:${shadow ? theme.expressiveness.shadowMedium : 'none'};-webkit-transition:opacity 0.25s ease 0s,top 0.25s ease 0s;transition:opacity 0.25s ease 0s,top 0.25s ease 0s;}.inner.__jsx-style-dynamic-selector{position:relative;font-size:0.875rem;padding:0;}.inner.arrow.__jsx-style-dynamic-selector:after{content:'';width:10px;height:10px;z-index:-2;background:${colors.bgColor};border-radius:0px 0px 2px 0px;position:absolute;left:${left};top:${top};right:${right};bottom:${bottom};-webkit-transform:${transform};-ms-transform:${transform};transform:${transform};}.wrapper-enter-active.__jsx-style-dynamic-selector{opacity:1;top:${rect.top};}`
      })]
    })
  }), el);
};

export default TooltipContent;