import _JSXStyle from "styled-jsx/style";
import React, { useEffect, useRef, useState } from 'react';
import withDefaults from '../utils/with-defaults';
import TooltipContent from './tooltip-content';
import useClickAway from '../use-click-away';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  initialVisible: false,
  hideArrow: false,
  shadow: true,
  rounded: false,
  color: 'default',
  contentColor: 'default',
  trigger: 'hover',
  placement: 'top',
  enterDelay: 0,
  leaveDelay: 0,
  offset: 12,
  className: '',
  portalClassName: '',
  onVisibleChange: () => {}
};

const Tooltip = ({
  children,
  initialVisible,
  content,
  offset,
  placement,
  portalClassName,
  enterDelay,
  leaveDelay,
  trigger,
  rounded,
  color,
  contentColor,
  shadow,
  className,
  onVisibleChange,
  hideArrow,
  visible: customVisible,
  ...props
}) => {
  const timer = useRef();
  const ref = useRef(null);
  const [visible, setVisible] = useState(initialVisible);
  const contentProps = {
    color,
    contentColor,
    visible,
    shadow,
    offset,
    placement,
    rounded,
    hideArrow,
    parent: ref,
    className: portalClassName
  };

  const changeVisible = nextState => {
    const clear = () => {
      clearTimeout(timer.current);
      timer.current = undefined;
    };

    const handler = nextState => {
      setVisible(nextState);
      onVisibleChange(nextState);
      clear();
    };

    clear();

    if (nextState) {
      timer.current = window.setTimeout(() => handler(true), enterDelay);
      return;
    }

    timer.current = window.setTimeout(() => handler(false), leaveDelay);
  };

  const mouseEventHandler = next => trigger === 'hover' && changeVisible(next);

  const clickEventHandler = () => trigger === 'click' && changeVisible(!visible);

  useClickAway(ref, () => trigger === 'click' && changeVisible(false));
  useEffect(() => {
    if (customVisible === undefined) return;
    changeVisible(customVisible);
  }, [customVisible]);
  return /*#__PURE__*/_jsxs("div", {
    ref: ref,
    onClick: clickEventHandler,
    onMouseEnter: () => mouseEventHandler(true),
    onMouseLeave: () => mouseEventHandler(false),
    onFocus: () => mouseEventHandler(true),
    onBlur: () => mouseEventHandler(false),
    ...props,
    className: "jsx-303000714" + " " + (props && props.className != null && props.className || `tooltip ${className}`),
    children: [children, /*#__PURE__*/_jsx(TooltipContent, { ...contentProps,
      children: content
    }), /*#__PURE__*/_jsx(_JSXStyle, {
      id: "303000714",
      children: ".tooltip.jsx-303000714{width:-webkit-max-content;width:-moz-max-content;width:max-content;display:inherit;}"
    })]
  });
};

export default withDefaults(Tooltip, defaultProps);