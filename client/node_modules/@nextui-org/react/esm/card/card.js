import _JSXStyle from "styled-jsx/style";
import React, { useMemo, useImperativeHandle, useRef } from 'react';
import useTheme from '../use-theme';
import { getStyles } from './styles';
import CardHeader from './card-header';
import CardFooter from './card-footer';
import CardBody from './card-body';
import Image from '../image';
import clsx from '../utils/clsx';
import Drip from '../utils/drip';
import useDrip from '../use-drip';
import { hasChild, pickChild } from '../utils/collections';
import { getNormalWeight } from '../utils/dimensions';
import { CardContext } from './card-context';
import { getFocusStyles } from '../utils/styles';
import useKeyboard, { KeyCode } from '../use-keyboard';
import { __DEV__ } from '../utils/assertion';
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
import { jsx as _jsx } from "react/jsx-runtime";
const defaultProps = {
  color: 'default',
  textColor: 'default',
  bordered: false,
  cover: false,
  animated: true,
  clickable: false,
  hoverable: false,
  shadow: true,
  borderWeight: 'normal',
  width: '100%',
  height: 'auto',
  className: ''
};
const Card = /*#__PURE__*/React.forwardRef(({ ...cardProps
}, ref) => {
  const {
    children,
    bordered,
    cover,
    className,
    shadow,
    animated,
    clickable,
    hoverable,
    color: cardColor,
    borderWeight: borderWeightProp,
    width,
    height,
    textColor,
    onClick,
    ...props
  } = cardProps;
  const theme = useTheme();
  const {
    color,
    bgColor,
    dripColor,
    borderColor
  } = useMemo(() => getStyles(cardColor, textColor, shadow, bordered, theme), [cardColor, theme, textColor, shadow, bordered]);
  const cardRef = useRef(null);
  useImperativeHandle(ref, () => cardRef.current);
  const {
    onClick: onDripClickHandler,
    ...dripBindings
  } = useDrip(false, cardRef);
  const [withoutHeaderChildren, headerChildren] = pickChild(children, CardHeader);
  const [withoutFooterChildren, footerChildren] = pickChild(withoutHeaderChildren, CardFooter);
  const [withoutImageChildren, imageChildren] = pickChild(withoutFooterChildren, Image);
  const {
    className: focusClassName,
    styles: focusStyles
  } = getFocusStyles(theme);
  const hasContent = hasChild(withoutImageChildren, CardBody);
  const hasHeader = hasChild(children, CardHeader);
  const borderWeight = useMemo(() => bordered ? getNormalWeight(borderWeightProp) : '0px', [bordered, borderWeightProp]);
  const cardConfig = useMemo(() => ({
    background: bgColor,
    noPadding: cover ? true : undefined
  }), []);

  const clickHandler = event => {
    if (animated && cardRef.current) {
      onDripClickHandler(event);
    }

    onClick && onClick(event);
  };

  const {
    bindings
  } = useKeyboard(event => {
    if (!clickable) {
      return;
    }

    clickHandler(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true
  });
  return /*#__PURE__*/_jsx(CardContext.Provider, {
    value: cardConfig,
    children: /*#__PURE__*/_jsxs("div", {
      ref: cardRef,
      tabIndex: clickable ? 0 : -1,
      onClick: clickHandler,
      ...props,
      ...bindings,
      className: _JSXStyle.dynamic([["1879174986", [bgColor, width, height, theme.layout.radius, shadow && !bordered ? theme.expressiveness.shadowMedium : 'none', color, borderWeight, borderColor, shadow ? theme.expressiveness.shadowLarge : '']]]) + " " + (bindings && bindings.className != null && bindings.className || props && props.className != null && props.className || clsx('card', {
        animated,
        cover,
        clickable,
        hoverable
      }, clickable && focusClassName, className) || ""),
      children: [hasHeader ? /*#__PURE__*/_jsxs(_Fragment, {
        children: [headerChildren, imageChildren]
      }) : imageChildren, hasContent ? withoutImageChildren : !cover ? /*#__PURE__*/_jsx(CardBody, {
        children: withoutImageChildren
      }) : null, clickable && animated && /*#__PURE__*/_jsx(Drip, {
        color: dripColor,
        ...dripBindings
      }), footerChildren, /*#__PURE__*/_jsx(_JSXStyle, {
        id: "1879174986",
        dynamic: [bgColor, width, height, theme.layout.radius, shadow && !bordered ? theme.expressiveness.shadowMedium : 'none', color, borderWeight, borderColor, shadow ? theme.expressiveness.shadowLarge : ''],
        children: `.card.__jsx-style-dynamic-selector{margin:0;padding:0;position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;overflow:hidden;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;background:${bgColor};width:100%;max-width:${width};height:${height};border-radius:${theme.layout.radius};box-shadow:${shadow && !bordered ? theme.expressiveness.shadowMedium : 'none'};box-sizing:border-box;color:${color};border:${borderWeight} solid ${borderColor};}.card.animated.__jsx-style-dynamic-selector{-webkit-transition:all 0.25s ease;transition:all 0.25s ease;}.card.clickable.animated.__jsx-style-dynamic-selector:active{-webkit-transform:scale(0.97);-ms-transform:scale(0.97);transform:scale(0.97);}.card.hoverable.clickable.animated.__jsx-style-dynamic-selector:active{-webkit-transform:scale(0.99);-ms-transform:scale(0.99);transform:scale(0.99);}.card.clickable.__jsx-style-dynamic-selector{cursor:pointer;}.card.__jsx-style-dynamic-selector .image{width:100%;}.card.hoverable.animated.__jsx-style-dynamic-selector:hover{-webkit-transform:translateY(-2px);-ms-transform:translateY(-2px);transform:translateY(-2px);box-shadow:${shadow ? theme.expressiveness.shadowLarge : ''};}.card.cover.__jsx-style-dynamic-selector img{object-fit:cover;}.card.__jsx-style-dynamic-selector:not(.cover) .image{border-bottom-left-radius:0;border-bottom-right-radius:0;}`
      }), focusStyles]
    })
  });
});

if (__DEV__) {
  Card.displayName = 'NextUI - Card';
}

Card.defaultProps = defaultProps;
export default Card;