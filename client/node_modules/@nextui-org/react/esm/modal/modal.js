import React, { useEffect, useMemo, useState } from 'react';
import { createPortal } from 'react-dom';
import usePortal from '../use-portal';
import ModalWrapper from './modal-wrapper';
import Backdrop from '../backdrop';
import { ModalContext } from './modal-context';
import useBodyScroll from '../use-body-scroll';
import useCurrentState from '../use-current-state';
import useKeyboard, { KeyCode } from '../use-keyboard';
import { __DEV__ } from '../utils/assertion';
import { jsx as _jsx } from "react/jsx-runtime";
const defaultProps = {
  width: '400px',
  className: '',
  preventClose: false,
  fullScreen: false,
  closeButton: false,
  animated: true,
  blur: false,
  scroll: false,
  noPadding: false
};

const Modal = ({
  children,
  onClose,
  onOpen,
  open,
  autoMargin,
  width: wrapperWidth,
  className,
  preventClose,
  blur,
  animated,
  fullScreen,
  noPadding,
  ...props
}) => {
  const portal = usePortal('modal');
  const [, setBodyHidden] = useBodyScroll(null, {
    scrollLayer: true
  });
  const [visible, setVisible, visibleRef] = useCurrentState(false);
  const [rebound, setRebound] = useState(false);

  const closeModal = () => {
    onClose && onClose();
    setVisible(false);
    setBodyHidden(false);
  };

  useEffect(() => {
    if (open === undefined) return;

    if (open) {
      onOpen && onOpen();
    }

    if (!open && visibleRef.current) {
      onClose && onClose();
    }

    setVisible(open);
    setBodyHidden(open);
  }, [open]);

  const toggleRebound = () => {
    setRebound(true);
    const timer = setTimeout(() => {
      setRebound(false);
      clearTimeout(timer);
    }, 300);
  };

  const {
    bindings
  } = useKeyboard(() => {
    if (preventClose) {
      toggleRebound();
      return;
    }

    closeModal();
  }, KeyCode.Escape, {
    disableGlobalEvent: true
  });

  const closeFromBackdrop = () => {
    if (preventClose) {
      toggleRebound();
      return;
    }

    closeModal();
  };

  const modalConfig = useMemo(() => ({
    close: closeModal,
    autoMargin,
    noPadding
  }), []);
  if (!portal) return null;
  return /*#__PURE__*/createPortal( /*#__PURE__*/_jsx(ModalContext.Provider, {
    value: modalConfig,
    children: /*#__PURE__*/_jsx(Backdrop, {
      onClick: closeFromBackdrop,
      visible: visible,
      width: wrapperWidth,
      fullScreenContent: fullScreen,
      blur: blur,
      animated: animated,
      ...bindings,
      children: /*#__PURE__*/_jsx(ModalWrapper, {
        visible: visible,
        onCloseButtonClick: closeModal,
        className: className,
        fullScreen: fullScreen,
        rebound: rebound,
        animated: animated,
        ...props,
        children: children
      })
    })
  }), portal);
};

if (__DEV__) {
  Backdrop.displayName = 'NextUI - Modal';
}

Modal.defaultProps = defaultProps;
export default Modal;