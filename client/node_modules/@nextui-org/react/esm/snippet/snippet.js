import _JSXStyle from "styled-jsx/style";
import React, { useMemo, useState, useRef } from 'react';
import Tooltip from '../tooltip';
import useTheme from '../use-theme';
import withDefaults from '../utils/with-defaults';
import { getStyles } from './styles';
import SnippetIcon from './snippet-icon';
import useClipboard from '../use-clipboard';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  filled: false,
  bordered: false,
  showTooltip: true,
  symbol: '$',
  width: 'initial',
  copy: 'default',
  type: 'default',
  tooltipColor: 'default',
  tooltipCopyText: 'Copy',
  tooltipCopiedText: 'Copied',
  className: ''
};

const textArrayToString = text => {
  return text.reduce((pre, current) => {
    if (!current) return pre;
    return pre ? `${pre}\n${current}` : current;
  }, '');
};

const Snippet = ({
  type,
  filled,
  bordered,
  children,
  symbol,
  showTooltip,
  text,
  width,
  tooltipCopyText,
  tooltipCopiedText,
  tooltipColor,
  copy: copyType,
  className,
  ...props
}) => {
  const theme = useTheme();
  const [copied, setCopied] = useState(false);
  const {
    copy
  } = useClipboard();
  const ref = useRef(null);
  const isMultiLine = text && Array.isArray(text);
  const style = useMemo(() => getStyles(type, theme.palette, filled), [type, theme.palette, filled]);
  const showCopyIcon = useMemo(() => copyType !== 'prevent', [copyType]);
  const childText = useMemo(() => {
    if (isMultiLine) return textArrayToString(text);
    if (!children) return text;
    if (!ref.current) return '';
    return ref.current.textContent;
  }, [ref.current, children, text]);
  const snippetWidth = useMemo(() => {
    return showCopyIcon ? `calc(100% - 2 * ${theme.layout.gap})` : '100%';
  }, [showCopyIcon]);
  const symbolBefore = useMemo(() => {
    const str = symbol.trim();
    return str ? `${str} ` : '';
  }, [symbol]);

  const clickHandler = () => {
    if (!childText || !showCopyIcon) return;
    copy(childText);
    if (copyType === 'slient') return;
    setCopied(true);
  };

  const handleTooltipVisibleChange = () => {
    setTimeout(() => {
      setCopied(false);
    }, 200);
  };

  return /*#__PURE__*/_jsxs("div", { ...props,
    className: _JSXStyle.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]) + " " + (props && props.className != null && props.className || `snippet ${className}`),
    children: [isMultiLine ? text.map((t, index) => /*#__PURE__*/_jsx("pre", {
      className: _JSXStyle.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]),
      children: t
    }, `snippet-${index}-${t}`)) : /*#__PURE__*/_jsx("pre", {
      ref: ref,
      className: _JSXStyle.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]),
      children: children || text
    }), showCopyIcon && copyType !== 'slient' ? /*#__PURE__*/_jsx(Tooltip, {
      hideArrow: true,
      rounded: true,
      color: tooltipColor,
      content: copied ? tooltipCopiedText : tooltipCopyText,
      onVisibleChange: handleTooltipVisibleChange,
      children: /*#__PURE__*/_jsx("span", {
        onClick: clickHandler,
        className: _JSXStyle.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]) + " " + "copy",
        children: /*#__PURE__*/_jsx(SnippetIcon, {
          fill: theme.palette.accents_6
        })
      })
    }) : copyType !== 'prevent' && /*#__PURE__*/_jsx("span", {
      onClick: clickHandler,
      className: _JSXStyle.dynamic([["4130456444", [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap]]]) + " " + "copy",
      children: /*#__PURE__*/_jsx(SnippetIcon, {
        fill: theme.palette.accents_6
      })
    }), /*#__PURE__*/_jsx(_JSXStyle, {
      id: "4130456444",
      dynamic: [width, theme.layout.gap, theme.layout.gap, style.color, style.bgColor, bordered ? '1px' : '0px', style.border, theme.layout.radius, snippetWidth, style.color, symbolBefore, style.bgColor, theme.layout.gap],
      children: `.snippet.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;width:${width};max-width:100%;padding:calc(${theme.layout.gap} * 0.75) ${theme.layout.gap};color:${style.color};background:${style.bgColor};border:${bordered ? '1px' : '0px'} solid ${style.border};border-radius:${theme.layout.radius};}pre.__jsx-style-dynamic-selector{margin:0;padding:0;border:none;border-radius:0;width:${snippetWidth};background-color:transparent;color:${style.color};font-size:0.8125rem;}pre.__jsx-style-dynamic-selector::before{content:'${symbolBefore}';-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}pre.__jsx-style-dynamic-selector *{margin:0;padding:0;font-size:inherit;color:inherit;}.copy.__jsx-style-dynamic-selector{background-color:${style.bgColor};display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:flex-start;-webkit-box-align:flex-start;-ms-flex-align:flex-start;align-items:flex-start;width:calc(2 * ${theme.layout.gap});color:inherit;-webkit-transition:opacity 0.2s ease 0s;transition:opacity 0.2s ease 0s;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}.copy.__jsx-style-dynamic-selector:hover{opacity:0.7;}`
    })]
  });
};

const MemoSnippet = /*#__PURE__*/React.memo(Snippet);
export default withDefaults(MemoSnippet, defaultProps);