import _JSXStyle from "styled-jsx/style";
import React, { useMemo } from 'react';
import withDefaults from '../utils/with-defaults';
import useTheme from '../use-theme';
import { CollapseContext } from './collapse-context';
import useCurrentState from '../use-current-state';
import { setChildrenIndex } from '../utils/collections';
import { getNormalWeight } from '../utils/dimensions';
import clsx from '../utils/clsx';
import Collapse from './collapse';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  accordion: true,
  shadow: false,
  bordered: false,
  splitted: false,
  borderWeight: 'light',
  className: ''
};

const CollapseGroup = ({
  children,
  accordion,
  shadow,
  className,
  animated,
  bordered,
  splitted,
  divider,
  borderWeight: borderWeightProp,
  onChange,
  ...props
}) => {
  const theme = useTheme();
  const [state, setState, stateRef] = useCurrentState([]);

  const updateValues = (currentIndex, nextState) => {
    const hasChild = stateRef.current.find(val => val === currentIndex);
    onChange && onChange(currentIndex, nextState);

    if (accordion) {
      if (nextState) return setState([currentIndex]);
      return setState([]);
    }

    if (nextState) {
      // In a few cases, the user will set Collapse Component state manually.
      // If the user incorrectly set the state, Group component should ignore it.

      /* istanbul ignore if */
      if (hasChild) return;
      return setState([...stateRef.current, currentIndex]);
    }

    setState(stateRef.current.filter(item => item !== currentIndex));
  };

  const bgColor = useMemo(() => theme.type === 'dark' ? theme.palette.accents_1 : theme.palette.background, [theme.type]);
  const initialValue = useMemo(() => ({
    values: state,
    updateValues,
    divider,
    animated
  }), [state.join(',')]);
  const hasIndexChildren = useMemo(() => setChildrenIndex(children, [Collapse]), [children]);
  const borderWeight = useMemo(() => {
    return bordered ? getNormalWeight(borderWeightProp) : '0px';
  }, [bordered, borderWeightProp]);
  return /*#__PURE__*/_jsx(CollapseContext.Provider, {
    value: initialValue,
    children: /*#__PURE__*/_jsxs("div", { ...props,
      className: _JSXStyle.dynamic([["2642035014", [theme.layout.gapHalf, theme.layout.radius, theme.layout.gap, bgColor, theme.expressiveness.shadowMedium, bgColor, theme.expressiveness.shadowMedium, theme.layout.gapHalf, borderWeight, theme.palette.border]]]) + " " + (props && props.className != null && props.className || clsx('collapse-group', {
        shadow,
        bordered,
        splitted
      }, className) || ""),
      children: [hasIndexChildren, /*#__PURE__*/_jsx(_JSXStyle, {
        id: "2642035014",
        dynamic: [theme.layout.gapHalf, theme.layout.radius, theme.layout.gap, bgColor, theme.expressiveness.shadowMedium, bgColor, theme.expressiveness.shadowMedium, theme.layout.gapHalf, borderWeight, theme.palette.border],
        children: `.collapse-group.__jsx-style-dynamic-selector{width:auto;padding:0 ${theme.layout.gapHalf};}.collapse-group.__jsx-style-dynamic-selector>div + div{border-top:none;}.shadow.__jsx-style-dynamic-selector,.bordered.__jsx-style-dynamic-selector,.collapse-group.splitted.__jsx-style-dynamic-selector .collapse{border-radius:${theme.layout.radius};padding:0 ${theme.layout.gap};}.shadow.__jsx-style-dynamic-selector{border:none;background:${bgColor};box-shadow:${theme.expressiveness.shadowMedium};}.collapse-group.splitted.__jsx-style-dynamic-selector .collapse{border:none;background:${bgColor};box-shadow:${theme.expressiveness.shadowMedium};margin:${theme.layout.gapHalf} 0;}.bordered.__jsx-style-dynamic-selector{border:${borderWeight} solid ${theme.palette.border};}.collapse-group.__jsx-style-dynamic-selector .collapse:last-child{border-bottom:none;}.collapse-group.__jsx-style-dynamic-selector .collapse:first-child{border-top:none;}.gradient.vertical.__jsx-style-dynamic-selector .button:not(:last-child):not(:first-child){padding-top:0 !important;}`
      })]
    })
  });
};

export default withDefaults(CollapseGroup, defaultProps);