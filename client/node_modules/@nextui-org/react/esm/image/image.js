import _JSXStyle from "styled-jsx/style";
import React, { useEffect, useRef, useMemo, useState } from 'react';
import useTheme from '../use-theme';
import ImageSkeleton from './image.skeleton';
import useRealShape from '../use-real-shape';
import useCurrentState from '../use-current-state';
import useResize from '../use-resize';
import cslx from '../utils/clsx';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  showSkeleton: true,
  autoResize: true,
  objectFit: 'scale-down',
  className: '',
  maxDelay: 3000
};

const Image = ({
  src,
  width,
  height,
  showSkeleton: showSkeletonProp,
  className,
  maxDelay,
  autoResize,
  objectFit,
  ...props
}) => {
  const theme = useTheme();
  const [loading, setLoading] = useState(true);
  const [showSkeleton, setShowSkeleton] = useState(true);
  const {
    w,
    h
  } = useMemo(() => {
    return {
      w: width ? typeof width === 'number' ? `${width}px` : width : 'auto',
      h: height ? typeof height === 'number' ? `${height}px` : height : 'auto'
    };
  }, [width, height]);
  const [zoomHeight, setZoomHeight, zoomHeightRef] = useCurrentState(h);
  const imageRef = useRef(null);
  const [shape, updateShape] = useRealShape(imageRef);
  const showAnimation = showSkeletonProp && width && height;

  const imageLoaded = () => {
    setLoading(false);
  };

  useEffect(() => {
    if (!showAnimation) return;
    if (!imageRef.current) return;

    if (imageRef.current.complete) {
      setLoading(false);
      setShowSkeleton(false);
    }
  });
  useEffect(() => {
    const timer = setTimeout(() => {
      if (showAnimation) {
        setShowSkeleton(false);
      }

      clearTimeout(timer);
    }, maxDelay);
    return () => clearTimeout(timer);
  }, [loading]);
  /**
   * On mobile devices, the render witdth may be less than CSS width value.
   * If the image is scaled, set the height manually.
   * This is to ensure the aspect ratio of the image.
   *
   * If the image is auto width, ignore all.
   */

  useEffect(() => {
    if (!autoResize) return;
    const notLoaded = shape.width === 0;
    const isAutoZoom = zoomHeightRef.current === 'auto';
    if (notLoaded || !width || !height) return;

    if (shape.width < width) {
      !isAutoZoom && setZoomHeight('auto');
    } else {
      isAutoZoom && setZoomHeight(h);
    }
  }, [shape, width]);
  useResize(() => {
    if (!autoResize) return;
    updateShape();
  });
  return /*#__PURE__*/_jsxs("div", {
    className: _JSXStyle.dynamic([["2293692961", [w, zoomHeight, theme.layout.radius, objectFit]]]) + " " + (cslx('image', {
      'image-ready': !loading
    }, className) || ""),
    children: [showSkeleton && showAnimation && /*#__PURE__*/_jsx(ImageSkeleton, {
      opacity: loading ? 0.5 : 0
    }), /*#__PURE__*/_jsx("img", {
      ref: imageRef,
      width: width,
      height: height,
      onLoad: imageLoaded,
      src: src,
      ...props,
      className: _JSXStyle.dynamic([["2293692961", [w, zoomHeight, theme.layout.radius, objectFit]]]) + " " + (props && props.className != null && props.className || "")
    }), /*#__PURE__*/_jsx(_JSXStyle, {
      id: "2293692961",
      dynamic: [w, zoomHeight, theme.layout.radius, objectFit],
      children: `.image.__jsx-style-dynamic-selector{width:${w};opacity:0;height:${zoomHeight};margin:0 auto;position:relative;border-radius:${theme.layout.radius};overflow:hidden;max-width:100%;-webkit-transition:-webkit-transform 250ms ease 0ms,opacity 200ms ease-in 0ms;-webkit-transition:transform 250ms ease 0ms,opacity 200ms ease-in 0ms;transition:transform 250ms ease 0ms,opacity 200ms ease-in 0ms;}.image-ready.__jsx-style-dynamic-selector{opacity:1;}img.__jsx-style-dynamic-selector{width:100%;height:100%;object-fit:${objectFit};display:block;}`
    })]
  });
};

Image.defaultProps = defaultProps;
export default /*#__PURE__*/React.memo(Image);