import _JSXStyle from "styled-jsx/style";
import React, { useEffect, useRef, useState } from 'react';
import withDefaults from '../utils/with-defaults';
import useRealShape from '../use-real-shape';
import clsx from './clsx';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  isExpanded: false,
  animated: true,
  delay: 200
};

const Expand = ({
  isExpanded,
  delay,
  animated,
  children
}) => {
  const [height, setHeight] = useState(isExpanded ? 'auto' : '0');
  const [selfExpanded, setSelfExpanded] = useState(isExpanded);
  const contentRef = useRef(null);
  const entryTimer = useRef();
  const leaveTimer = useRef();
  const resetTimer = useRef();
  const [state, updateShape] = useRealShape(contentRef);
  useEffect(() => setHeight(`${state.height}px`), [state.height]);
  useEffect(() => {
    if (isExpanded === selfExpanded) return; // show element or reset height.
    // force an update once manually, even if the element does not change.
    // (the height of the element might be "auto")

    if (!isExpanded) {
      updateShape();
      setHeight(`${state.height}px`);
    } // show expand animation


    entryTimer.current = window.setTimeout(() => {
      setSelfExpanded(isExpanded);
      clearTimeout(entryTimer.current);
    }, 30); // Reset height after animation

    if (isExpanded) {
      resetTimer.current = window.setTimeout(() => {
        setHeight('auto');
        clearTimeout(resetTimer.current);
      }, delay);
    } else {
      leaveTimer.current = window.setTimeout(() => {
        clearTimeout(leaveTimer.current);
      }, delay / 2);
    }

    return () => {
      clearTimeout(entryTimer.current);
      clearTimeout(leaveTimer.current);
      clearTimeout(resetTimer.current);
    };
  }, [isExpanded]);
  return /*#__PURE__*/_jsxs("div", {
    className: _JSXStyle.dynamic([["2028774268", [delay, delay * 1.5, height]]]) + " " + (clsx('container', {
      expanded: selfExpanded,
      animated
    }) || ""),
    children: [/*#__PURE__*/_jsx("div", {
      ref: contentRef,
      className: _JSXStyle.dynamic([["2028774268", [delay, delay * 1.5, height]]]) + " " + "content",
      children: children
    }), /*#__PURE__*/_jsx(_JSXStyle, {
      id: "2028774268",
      dynamic: [delay, delay * 1.5, height],
      children: `.container.__jsx-style-dynamic-selector{padding:0;margin:0;height:0;opacity:0;overflow:hidden;}.animated.__jsx-style-dynamic-selector{-webkit-transition:height ${delay}ms ease 0ms, opacity ${delay * 1.5}ms ease 0ms;transition:height ${delay}ms ease 0ms, opacity ${delay * 1.5}ms ease 0ms;}.expanded.__jsx-style-dynamic-selector{height:${height};opacity:1;}`
    })]
  });
};

export default withDefaults(Expand, defaultProps);