import React from 'react';
export const getId = () => {
  return Math.random().toString(32).slice(2, 10);
};
export const hasChild = (children, child) => {
  const types = React.Children.map(children, item => {
    if (! /*#__PURE__*/React.isValidElement(item)) return null;
    return item.type;
  });
  return (types || []).includes(child);
};
export const pick = (props, obj) => props.reduce((acc, prop) => {
  acc[prop] = obj[prop];
  return acc;
}, {});
export const pickChild = (children, targetChild) => {
  let target = [];
  const withoutTargetChildren = React.Children.map(children, item => {
    if (! /*#__PURE__*/React.isValidElement(item)) return item;

    if (item.type === targetChild) {
      target.push(item);
      return null;
    }

    return item;
  });
  const targetChildren = target.length >= 0 ? target : undefined;
  return [withoutTargetChildren, targetChildren];
};
export const isChildElement = (parent, child) => {
  if (!parent || !child) return false; // eslint-disable-next-line no-undef

  let node = child;

  while (node) {
    if (node === parent) return true;
    node = node.parentNode;
  }

  return false;
};
export const isBrowser = () => {
  return Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
};
export const isMac = () => {
  if (!isBrowser()) return false;
  return navigator.platform.toUpperCase().indexOf('MAC') >= 0;
};
export const setChildrenIndex = (children, targetComponents = []) => {
  if (React.Children.count(children) === 0) return [];
  const allowAll = targetComponents.length === 0;

  const clone = (child, props = {}) => /*#__PURE__*/React.cloneElement(child, props);

  let index = 0;
  return React.Children.map(children, item => {
    if (! /*#__PURE__*/React.isValidElement(item)) return item;
    index = index + 1;
    if (allowAll) return clone(item, {
      index
    });
    const isAllowed = targetComponents.find(child => child === item.type);
    if (isAllowed) return clone(item, {
      index
    });
    index = index - 1;
    return item;
  });
};