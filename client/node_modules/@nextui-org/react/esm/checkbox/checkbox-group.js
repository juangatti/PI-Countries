import _JSXStyle from "styled-jsx/style";
import React, { useEffect, useMemo, useState } from 'react';
import { CheckboxContext } from './checkbox-context';
import useWarning from '../use-warning';
import withDefaults from '../utils/with-defaults';
import { __DEV__ } from '../utils/assertion';
import { getCheckboxSize } from './styles';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const defaultProps = {
  color: 'primary',
  textColor: 'default',
  disabled: false,
  size: 'medium',
  className: '',
  row: false
};

const CheckboxGroup = ({
  color,
  textColor,
  disabled,
  onChange,
  value,
  size,
  row,
  children,
  className,
  ...props
}) => {
  const [selfVal, setSelfVal] = useState([]);

  if (!value && __DEV__) {
    value = [];
    useWarning('Props "value" is required.', 'Checkbox Group');
  }

  const updateState = (val, checked) => {
    const removed = selfVal.filter(v => v !== val);
    const next = checked ? [...removed, val] : removed;
    setSelfVal(next);
    onChange && onChange(next);
  };

  const providerValue = useMemo(() => {
    return {
      updateState,
      color,
      textColor,
      disabledAll: disabled,
      inGroup: true,
      values: selfVal
    };
  }, [disabled, selfVal]);
  const fontSize = useMemo(() => getCheckboxSize(size), [size]);
  const groupGap = `calc(${fontSize} * 1)`;
  useEffect(() => {
    setSelfVal(value);
  }, [value.join(',')]);
  return /*#__PURE__*/_jsx(CheckboxContext.Provider, {
    value: providerValue,
    children: /*#__PURE__*/_jsxs("div", {
      role: "group",
      ...props,
      className: _JSXStyle.dynamic([["801134383", [row ? 0 : groupGap, row ? groupGap : 0, fontSize, row ? 'row' : 'column']]]) + " " + (props && props.className != null && props.className || `checkbox-group ${className}`),
      children: [children, /*#__PURE__*/_jsx(_JSXStyle, {
        id: "801134383",
        dynamic: [row ? 0 : groupGap, row ? groupGap : 0, fontSize, row ? 'row' : 'column'],
        children: `.checkbox-group.__jsx-style-dynamic-selector .checkbox{margin-top:${row ? 0 : groupGap};margin-right:${row ? groupGap : 0};--checkbox-size:${fontSize};}.checkbox-group.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:${row ? 'row' : 'column'};-ms-flex-direction:${row ? 'row' : 'column'};flex-direction:${row ? 'row' : 'column'};}`
      })]
    })
  });
};

export default withDefaults(CheckboxGroup, defaultProps);